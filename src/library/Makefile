# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/library/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/randomjungle
pkgincludedir = $(includedir)/randomjungle
pkglibdir = $(libdir)/randomjungle
pkglibexecdir = $(libexecdir)/randomjungle
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
subdir = src/library
DIST_COMMON = $(librjungle_a_HEADERS) $(librjunglesparse_a_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/boost.m4 \
	$(top_srcdir)/m4/gsl.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/libxml2.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/m4/zlib.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(librjungle_adir)" \
	"$(DESTDIR)$(librjunglesparse_adir)"
LIBRARIES = $(lib_LIBRARIES)
ARFLAGS = cru
librjungle_a_AR = $(AR) $(ARFLAGS)
librjungle_a_LIBADD =
am__objects_1 =
am__objects_2 = $(am__objects_1)
am__objects_3 = librjungle_a-BitMatrix.$(OBJEXT) \
	librjungle_a-BuildinGenerators.$(OBJEXT) \
	librjungle_a-ClassAtom.$(OBJEXT) \
	librjungle_a-CmpldTree.$(OBJEXT) \
	librjungle_a-CmplFct.$(OBJEXT) librjungle_a-CondInf.$(OBJEXT) \
	librjungle_a-IAM2WayImportance.$(OBJEXT) \
	librjungle_a-IAMClassAtom.$(OBJEXT) \
	librjungle_a-Importance.$(OBJEXT) \
	librjungle_a-JTreeTweaks.$(OBJEXT) \
	librjungle_a-TImportance.$(OBJEXT) \
	librjungle_a-RJungleTuneMtry.$(OBJEXT) \
	librjungle_a-RJungleOutlier.$(OBJEXT) \
	librjungle_a-RJungleProto.$(OBJEXT) \
	librjungle_a-DataFrame.$(OBJEXT) \
	librjungle_a-DataTreeSet.$(OBJEXT) \
	librjungle_a-Exception.$(OBJEXT) \
	librjungle_a-FittingFct.$(OBJEXT) \
	librjungle_a-RJunglePrediction.$(OBJEXT) \
	librjungle_a-SaveCollector.$(OBJEXT) \
	librjungle_a-PermImportance.$(OBJEXT) \
	librjungle_a-Prediction.$(OBJEXT) \
	librjungle_a-ioLines.$(OBJEXT) \
	librjungle_a-Generator.$(OBJEXT) \
	librjungle_a-gzstream.$(OBJEXT) librjungle_a-Helper.$(OBJEXT) \
	librjungle_a-INode.$(OBJEXT) librjungle_a-librjungle.$(OBJEXT) \
	librjungle_a-Logistic.$(OBJEXT) librjungle_a-Node.$(OBJEXT) \
	librjungle_a-Profiler.$(OBJEXT) \
	librjungle_a-Proximities.$(OBJEXT) \
	librjungle_a-RJungleAcc.$(OBJEXT) \
	librjungle_a-RJungleBinder.$(OBJEXT) \
	librjungle_a-RJungleCompiler.$(OBJEXT) \
	librjungle_a-RJungleConfusion.$(OBJEXT) \
	librjungle_a-RJungleCtrl.$(OBJEXT) \
	librjungle_a-RJungleFromXML.$(OBJEXT) \
	librjungle_a-RJungleGen.$(OBJEXT) \
	librjungle_a-RJungleGrow.$(OBJEXT) \
	librjungle_a-RJungleHelper.$(OBJEXT) \
	librjungle_a-RJungleImportance.$(OBJEXT) \
	librjungle_a-RJungleImpute.$(OBJEXT) \
	librjungle_a-RJungleIO.$(OBJEXT) \
	librjungle_a-RJunglePar.$(OBJEXT) \
	librjungle_a-RJungleProxi.$(OBJEXT) \
	librjungle_a-SClassAtom.$(OBJEXT) \
	librjungle_a-T2ClassAtom.$(OBJEXT) \
	librjungle_a-TermClassAtom.$(OBJEXT) \
	librjungle_a-TermResult.$(OBJEXT) \
	librjungle_a-TestClass.$(OBJEXT) \
	librjungle_a-LotusTermClassAtom.$(OBJEXT) \
	librjungle_a-TimeProf.$(OBJEXT) \
	librjungle_a-TMClassAtom.$(OBJEXT) librjungle_a-Tree.$(OBJEXT) \
	librjungle_a-mvt.$(OBJEXT) mvtfortran.$(OBJEXT)
am_librjungle_a_OBJECTS = $(am__objects_2) $(am__objects_3)
librjungle_a_OBJECTS = $(am_librjungle_a_OBJECTS)
librjunglesparse_a_AR = $(AR) $(ARFLAGS)
librjunglesparse_a_LIBADD =
am__objects_4 = librjunglesparse_a-BitMatrix.$(OBJEXT) \
	librjunglesparse_a-BuildinGenerators.$(OBJEXT) \
	librjunglesparse_a-ClassAtom.$(OBJEXT) \
	librjunglesparse_a-CmpldTree.$(OBJEXT) \
	librjunglesparse_a-CmplFct.$(OBJEXT) \
	librjunglesparse_a-CondInf.$(OBJEXT) \
	librjunglesparse_a-IAM2WayImportance.$(OBJEXT) \
	librjunglesparse_a-IAMClassAtom.$(OBJEXT) \
	librjunglesparse_a-Importance.$(OBJEXT) \
	librjunglesparse_a-JTreeTweaks.$(OBJEXT) \
	librjunglesparse_a-TImportance.$(OBJEXT) \
	librjunglesparse_a-RJungleTuneMtry.$(OBJEXT) \
	librjunglesparse_a-RJungleOutlier.$(OBJEXT) \
	librjunglesparse_a-RJungleProto.$(OBJEXT) \
	librjunglesparse_a-DataFrame.$(OBJEXT) \
	librjunglesparse_a-DataTreeSet.$(OBJEXT) \
	librjunglesparse_a-Exception.$(OBJEXT) \
	librjunglesparse_a-FittingFct.$(OBJEXT) \
	librjunglesparse_a-RJunglePrediction.$(OBJEXT) \
	librjunglesparse_a-SaveCollector.$(OBJEXT) \
	librjunglesparse_a-PermImportance.$(OBJEXT) \
	librjunglesparse_a-Prediction.$(OBJEXT) \
	librjunglesparse_a-ioLines.$(OBJEXT) \
	librjunglesparse_a-Generator.$(OBJEXT) \
	librjunglesparse_a-gzstream.$(OBJEXT) \
	librjunglesparse_a-Helper.$(OBJEXT) \
	librjunglesparse_a-INode.$(OBJEXT) \
	librjunglesparse_a-librjungle.$(OBJEXT) \
	librjunglesparse_a-Logistic.$(OBJEXT) \
	librjunglesparse_a-Node.$(OBJEXT) \
	librjunglesparse_a-Profiler.$(OBJEXT) \
	librjunglesparse_a-Proximities.$(OBJEXT) \
	librjunglesparse_a-RJungleAcc.$(OBJEXT) \
	librjunglesparse_a-RJungleBinder.$(OBJEXT) \
	librjunglesparse_a-RJungleCompiler.$(OBJEXT) \
	librjunglesparse_a-RJungleConfusion.$(OBJEXT) \
	librjunglesparse_a-RJungleCtrl.$(OBJEXT) \
	librjunglesparse_a-RJungleFromXML.$(OBJEXT) \
	librjunglesparse_a-RJungleGen.$(OBJEXT) \
	librjunglesparse_a-RJungleGrow.$(OBJEXT) \
	librjunglesparse_a-RJungleHelper.$(OBJEXT) \
	librjunglesparse_a-RJungleImportance.$(OBJEXT) \
	librjunglesparse_a-RJungleImpute.$(OBJEXT) \
	librjunglesparse_a-RJungleIO.$(OBJEXT) \
	librjunglesparse_a-RJunglePar.$(OBJEXT) \
	librjunglesparse_a-RJungleProxi.$(OBJEXT) \
	librjunglesparse_a-SClassAtom.$(OBJEXT) \
	librjunglesparse_a-T2ClassAtom.$(OBJEXT) \
	librjunglesparse_a-TermClassAtom.$(OBJEXT) \
	librjunglesparse_a-TermResult.$(OBJEXT) \
	librjunglesparse_a-TestClass.$(OBJEXT) \
	librjunglesparse_a-LotusTermClassAtom.$(OBJEXT) \
	librjunglesparse_a-TimeProf.$(OBJEXT) \
	librjunglesparse_a-TMClassAtom.$(OBJEXT) \
	librjunglesparse_a-Tree.$(OBJEXT) \
	librjunglesparse_a-mvt.$(OBJEXT) mvtfortran.$(OBJEXT)
am_librjunglesparse_a_OBJECTS = $(am__objects_2) $(am__objects_4)
librjunglesparse_a_OBJECTS = $(am_librjunglesparse_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
F77COMPILE = $(F77) $(AM_FFLAGS) $(FFLAGS)
LTF77COMPILE = $(LIBTOOL) --tag=F77 $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(F77) $(AM_FFLAGS) $(FFLAGS)
F77LD = $(F77)
F77LINK = $(LIBTOOL) --tag=F77 $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(librjungle_a_SOURCES) $(librjunglesparse_a_SOURCES)
DIST_SOURCES = $(librjungle_a_SOURCES) $(librjunglesparse_a_SOURCES)
HEADERS = $(librjungle_a_HEADERS) $(librjunglesparse_a_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /randomjungle/build-aux/missing --run aclocal-1.11
AMTAR = ${SHELL} /randomjungle/build-aux/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /randomjungle/build-aux/missing --run autoconf
AUTOHEADER = ${SHELL} /randomjungle/build-aux/missing --run autoheader
AUTOMAKE = ${SHELL} /randomjungle/build-aux/missing --run automake-1.11
AWK = gawk
BOOST_CPPFLAGS = -I/usr/include
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -I/usr/include -I/usr/include/libxml2
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O2 -g0 -Wall -g -O2 -D__NOPLUGIN__
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISTCHECK_CONFIGURE_FLAGS =  '--with-boost='
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = gfortran
FFLAGS = -g -O2
FGREP = /bin/grep -F
FLIBS =  -L/usr/lib/gcc/x86_64-linux-gnu/4.6.1 -L/usr/lib/gcc/x86_64-linux-gnu/4.6.1/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/4.6.1/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/4.6.1/../../.. -lgfortran -lm -lquadmath
GREP = /bin/grep
GSL_CFLAGS = -I/usr/local/include
GSL_CONFIG = /usr/local/bin/gsl-config
GSL_LIBS = -L/usr/local/lib -lgsl -lgslcblas -lm
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS =  -L/usr/lib -lz
LIBDIR = library
LIBLRDIR = lr
LIBOBJS = 
LIBS = -lxml2 -lgsl -lm -lgslcblas -lxml2 -lpthread -lgfortran -lz 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /randomjungle/build-aux/missing --run makeinfo
MAKE_FOR_WINDOWS = no
MKDIR_P = /bin/mkdir -p
MPIINFIX = 
MPISEP = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENMP_CFLAGS = -fopenmp
OTOOL = 
OTOOL64 = 
PACKAGE = randomjungle
PACKAGE_BUGREPORT = 
PACKAGE_NAME = randomjungle
PACKAGE_STRING = randomjungle 1.2.
PACKAGE_TARNAME = randomjungle
PACKAGE_URL = 
PACKAGE_VERSION = 1.2.
PATH_SEPARATOR = :
POW_LIB = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SRCDIR = src
STRIP = strip
VERSION = 1.2.
XML2_CONFIG = /usr/bin/xml2-config
XML_CPPFLAGS = -I/usr/include/libxml2
XML_LIBS = -lxml2
abs_builddir = /randomjungle/src/library
abs_srcdir = /randomjungle/src/library
abs_top_builddir = /randomjungle
abs_top_srcdir = /randomjungle
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = gfortran
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /randomjungle/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
xml2_config = xml2-config
LIBNAME = @LIBNAME@
myincludes = -I$(top_srcdir)/src -I$(top_srcdir) -I$(top_srcdir)/src/lr
mycppflags = $(OPENMP_CFLAGS) $(BOOST_CPPFLAGS) $(myincludes)
AM_FFLAGS = $(myincludes) -x f77-cpp-input
myheaders = \
BitMatrix.h BuildinGenerators.h ClassAtom.h CmpldTree.h CmplFct.h \
CondInf.h ErrorCodes.h IAM2WayImportance.h IAMClassAtom.h Importance.h JTreeTweaks.h \
TImportance.h RJungleTuneMtry.h RJungleOutlier.h RJungleProto.h \
DataFrame.h DataTreeSet.h Exception.h \
FittingFct.h Generator.h RJunglePrediction.h init.h\
SaveCollector.h PermImportance.h Prediction.h ioLines.h\
gzstream.h Helper.h INode.h JTreeCtrl.h librjungle.h Logistic.h Node.h \
Profiler.h Proximities.h RJungleAcc.h RJungleBinder.h RJungleCompiler.h \
RJungleConfusion.h RJungleCtrl.h RJungleFromXML.h RJungleGen.h \
RJungleGrow.h RJungleHelper.h RJungleImportance.h RJungleImpute.h \
RJungleIO.h RJunglePar.h RJungleProxi.h SClassAtom.h T2ClassAtom.h \
TermClassAtom.h TermResult.h TestClass.h TimeProf.h TMClassAtom.h \
LotusTermClassAtom.h treedefs.h Tree.h mvt.h

mysources = \
BitMatrix.cpp BuildinGenerators.cpp ClassAtom.cpp CmpldTree.cpp CmplFct.cpp \
CondInf.cpp IAM2WayImportance.cpp IAMClassAtom.cpp Importance.cpp JTreeTweaks.cpp \
TImportance.cpp RJungleTuneMtry.cpp RJungleOutlier.cpp RJungleProto.cpp \
DataFrame.cpp DataTreeSet.cpp Exception.cpp \
FittingFct.cpp RJunglePrediction.cpp\
SaveCollector.cpp PermImportance.cpp Prediction.cpp ioLines.cpp\
Generator.cpp gzstream.cpp Helper.cpp INode.cpp librjungle.cpp \
Logistic.cpp Node.cpp Profiler.cpp Proximities.cpp RJungleAcc.cpp RJungleBinder.cpp \
RJungleCompiler.cpp RJungleConfusion.cpp RJungleCtrl.cpp RJungleFromXML.cpp \
RJungleGen.cpp RJungleGrow.cpp RJungleHelper.cpp RJungleImportance.cpp \
RJungleImpute.cpp RJungleIO.cpp RJunglePar.cpp RJungleProxi.cpp \
SClassAtom.cpp T2ClassAtom.cpp TermClassAtom.cpp TermResult.cpp TestClass.cpp \
LotusTermClassAtom.cpp TimeProf.cpp TMClassAtom.cpp Tree.cpp mvt.cpp mvtfortran.f


# normal library build
lib_LIBRARIES = librjungle.a librjunglesparse.a

# compiler flags
librjungle_a_CPPFLAGS = $(mycppflags)
librjunglesparse_a_CPPFLAGS = $(mycppflags) -D__SPARSE_DATA__

# the list of header files that belong to the library
librjungle_a_HEADERS = $(myheaders)
librjunglesparse_a_HEADERS = $(myheaders)

# where to install the headers on the system
librjungle_adir = $(includedir)/rjungle
librjunglesparse_adir = $(includedir)/rjunglesparse

# the sources to add to the library and to add to the distribution
librjungle_a_SOURCES = $(librjungle_a_HEADERS) $(mysources) 
librjunglesparse_a_SOURCES = $(librjunglesparse_a_HEADERS) $(mysources)
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .f .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/library/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/library/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(INSTALL_DATA) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$list2 "$(DESTDIR)$(libdir)" || exit $$?; }
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f $$p; then \
	    $(am__strip_dir) \
	    echo " ( cd '$(DESTDIR)$(libdir)' && $(RANLIB) $$f )"; \
	    ( cd "$(DESTDIR)$(libdir)" && $(RANLIB) $$f ) || exit $$?; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libdir)' && rm -f "$$files" )"; \
	cd "$(DESTDIR)$(libdir)" && rm -f $$files

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
librjungle.a: $(librjungle_a_OBJECTS) $(librjungle_a_DEPENDENCIES) 
	-rm -f librjungle.a
	$(librjungle_a_AR) librjungle.a $(librjungle_a_OBJECTS) $(librjungle_a_LIBADD)
	$(RANLIB) librjungle.a
librjunglesparse.a: $(librjunglesparse_a_OBJECTS) $(librjunglesparse_a_DEPENDENCIES) 
	-rm -f librjunglesparse.a
	$(librjunglesparse_a_AR) librjunglesparse.a $(librjunglesparse_a_OBJECTS) $(librjunglesparse_a_LIBADD)
	$(RANLIB) librjunglesparse.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/librjungle_a-BitMatrix.Po
include ./$(DEPDIR)/librjungle_a-BuildinGenerators.Po
include ./$(DEPDIR)/librjungle_a-ClassAtom.Po
include ./$(DEPDIR)/librjungle_a-CmplFct.Po
include ./$(DEPDIR)/librjungle_a-CmpldTree.Po
include ./$(DEPDIR)/librjungle_a-CondInf.Po
include ./$(DEPDIR)/librjungle_a-DataFrame.Po
include ./$(DEPDIR)/librjungle_a-DataTreeSet.Po
include ./$(DEPDIR)/librjungle_a-Exception.Po
include ./$(DEPDIR)/librjungle_a-FittingFct.Po
include ./$(DEPDIR)/librjungle_a-Generator.Po
include ./$(DEPDIR)/librjungle_a-Helper.Po
include ./$(DEPDIR)/librjungle_a-IAM2WayImportance.Po
include ./$(DEPDIR)/librjungle_a-IAMClassAtom.Po
include ./$(DEPDIR)/librjungle_a-INode.Po
include ./$(DEPDIR)/librjungle_a-Importance.Po
include ./$(DEPDIR)/librjungle_a-JTreeTweaks.Po
include ./$(DEPDIR)/librjungle_a-Logistic.Po
include ./$(DEPDIR)/librjungle_a-LotusTermClassAtom.Po
include ./$(DEPDIR)/librjungle_a-Node.Po
include ./$(DEPDIR)/librjungle_a-PermImportance.Po
include ./$(DEPDIR)/librjungle_a-Prediction.Po
include ./$(DEPDIR)/librjungle_a-Profiler.Po
include ./$(DEPDIR)/librjungle_a-Proximities.Po
include ./$(DEPDIR)/librjungle_a-RJungleAcc.Po
include ./$(DEPDIR)/librjungle_a-RJungleBinder.Po
include ./$(DEPDIR)/librjungle_a-RJungleCompiler.Po
include ./$(DEPDIR)/librjungle_a-RJungleConfusion.Po
include ./$(DEPDIR)/librjungle_a-RJungleCtrl.Po
include ./$(DEPDIR)/librjungle_a-RJungleFromXML.Po
include ./$(DEPDIR)/librjungle_a-RJungleGen.Po
include ./$(DEPDIR)/librjungle_a-RJungleGrow.Po
include ./$(DEPDIR)/librjungle_a-RJungleHelper.Po
include ./$(DEPDIR)/librjungle_a-RJungleIO.Po
include ./$(DEPDIR)/librjungle_a-RJungleImportance.Po
include ./$(DEPDIR)/librjungle_a-RJungleImpute.Po
include ./$(DEPDIR)/librjungle_a-RJungleOutlier.Po
include ./$(DEPDIR)/librjungle_a-RJunglePar.Po
include ./$(DEPDIR)/librjungle_a-RJunglePrediction.Po
include ./$(DEPDIR)/librjungle_a-RJungleProto.Po
include ./$(DEPDIR)/librjungle_a-RJungleProxi.Po
include ./$(DEPDIR)/librjungle_a-RJungleTuneMtry.Po
include ./$(DEPDIR)/librjungle_a-SClassAtom.Po
include ./$(DEPDIR)/librjungle_a-SaveCollector.Po
include ./$(DEPDIR)/librjungle_a-T2ClassAtom.Po
include ./$(DEPDIR)/librjungle_a-TImportance.Po
include ./$(DEPDIR)/librjungle_a-TMClassAtom.Po
include ./$(DEPDIR)/librjungle_a-TermClassAtom.Po
include ./$(DEPDIR)/librjungle_a-TermResult.Po
include ./$(DEPDIR)/librjungle_a-TestClass.Po
include ./$(DEPDIR)/librjungle_a-TimeProf.Po
include ./$(DEPDIR)/librjungle_a-Tree.Po
include ./$(DEPDIR)/librjungle_a-gzstream.Po
include ./$(DEPDIR)/librjungle_a-ioLines.Po
include ./$(DEPDIR)/librjungle_a-librjungle.Po
include ./$(DEPDIR)/librjungle_a-mvt.Po
include ./$(DEPDIR)/librjunglesparse_a-BitMatrix.Po
include ./$(DEPDIR)/librjunglesparse_a-BuildinGenerators.Po
include ./$(DEPDIR)/librjunglesparse_a-ClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-CmplFct.Po
include ./$(DEPDIR)/librjunglesparse_a-CmpldTree.Po
include ./$(DEPDIR)/librjunglesparse_a-CondInf.Po
include ./$(DEPDIR)/librjunglesparse_a-DataFrame.Po
include ./$(DEPDIR)/librjunglesparse_a-DataTreeSet.Po
include ./$(DEPDIR)/librjunglesparse_a-Exception.Po
include ./$(DEPDIR)/librjunglesparse_a-FittingFct.Po
include ./$(DEPDIR)/librjunglesparse_a-Generator.Po
include ./$(DEPDIR)/librjunglesparse_a-Helper.Po
include ./$(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Po
include ./$(DEPDIR)/librjunglesparse_a-IAMClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-INode.Po
include ./$(DEPDIR)/librjunglesparse_a-Importance.Po
include ./$(DEPDIR)/librjunglesparse_a-JTreeTweaks.Po
include ./$(DEPDIR)/librjunglesparse_a-Logistic.Po
include ./$(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-Node.Po
include ./$(DEPDIR)/librjunglesparse_a-PermImportance.Po
include ./$(DEPDIR)/librjunglesparse_a-Prediction.Po
include ./$(DEPDIR)/librjunglesparse_a-Profiler.Po
include ./$(DEPDIR)/librjunglesparse_a-Proximities.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleAcc.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleBinder.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleCompiler.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleConfusion.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleCtrl.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleFromXML.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleGen.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleGrow.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleHelper.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleIO.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleImportance.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleImpute.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleOutlier.Po
include ./$(DEPDIR)/librjunglesparse_a-RJunglePar.Po
include ./$(DEPDIR)/librjunglesparse_a-RJunglePrediction.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleProto.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleProxi.Po
include ./$(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Po
include ./$(DEPDIR)/librjunglesparse_a-SClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-SaveCollector.Po
include ./$(DEPDIR)/librjunglesparse_a-T2ClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-TImportance.Po
include ./$(DEPDIR)/librjunglesparse_a-TMClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-TermClassAtom.Po
include ./$(DEPDIR)/librjunglesparse_a-TermResult.Po
include ./$(DEPDIR)/librjunglesparse_a-TestClass.Po
include ./$(DEPDIR)/librjunglesparse_a-TimeProf.Po
include ./$(DEPDIR)/librjunglesparse_a-Tree.Po
include ./$(DEPDIR)/librjunglesparse_a-gzstream.Po
include ./$(DEPDIR)/librjunglesparse_a-ioLines.Po
include ./$(DEPDIR)/librjunglesparse_a-librjungle.Po
include ./$(DEPDIR)/librjunglesparse_a-mvt.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

librjungle_a-BitMatrix.o: BitMatrix.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-BitMatrix.o -MD -MP -MF $(DEPDIR)/librjungle_a-BitMatrix.Tpo -c -o librjungle_a-BitMatrix.o `test -f 'BitMatrix.cpp' || echo '$(srcdir)/'`BitMatrix.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-BitMatrix.Tpo $(DEPDIR)/librjungle_a-BitMatrix.Po
#	source='BitMatrix.cpp' object='librjungle_a-BitMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-BitMatrix.o `test -f 'BitMatrix.cpp' || echo '$(srcdir)/'`BitMatrix.cpp

librjungle_a-BitMatrix.obj: BitMatrix.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-BitMatrix.obj -MD -MP -MF $(DEPDIR)/librjungle_a-BitMatrix.Tpo -c -o librjungle_a-BitMatrix.obj `if test -f 'BitMatrix.cpp'; then $(CYGPATH_W) 'BitMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/BitMatrix.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-BitMatrix.Tpo $(DEPDIR)/librjungle_a-BitMatrix.Po
#	source='BitMatrix.cpp' object='librjungle_a-BitMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-BitMatrix.obj `if test -f 'BitMatrix.cpp'; then $(CYGPATH_W) 'BitMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/BitMatrix.cpp'; fi`

librjungle_a-BuildinGenerators.o: BuildinGenerators.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-BuildinGenerators.o -MD -MP -MF $(DEPDIR)/librjungle_a-BuildinGenerators.Tpo -c -o librjungle_a-BuildinGenerators.o `test -f 'BuildinGenerators.cpp' || echo '$(srcdir)/'`BuildinGenerators.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-BuildinGenerators.Tpo $(DEPDIR)/librjungle_a-BuildinGenerators.Po
#	source='BuildinGenerators.cpp' object='librjungle_a-BuildinGenerators.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-BuildinGenerators.o `test -f 'BuildinGenerators.cpp' || echo '$(srcdir)/'`BuildinGenerators.cpp

librjungle_a-BuildinGenerators.obj: BuildinGenerators.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-BuildinGenerators.obj -MD -MP -MF $(DEPDIR)/librjungle_a-BuildinGenerators.Tpo -c -o librjungle_a-BuildinGenerators.obj `if test -f 'BuildinGenerators.cpp'; then $(CYGPATH_W) 'BuildinGenerators.cpp'; else $(CYGPATH_W) '$(srcdir)/BuildinGenerators.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-BuildinGenerators.Tpo $(DEPDIR)/librjungle_a-BuildinGenerators.Po
#	source='BuildinGenerators.cpp' object='librjungle_a-BuildinGenerators.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-BuildinGenerators.obj `if test -f 'BuildinGenerators.cpp'; then $(CYGPATH_W) 'BuildinGenerators.cpp'; else $(CYGPATH_W) '$(srcdir)/BuildinGenerators.cpp'; fi`

librjungle_a-ClassAtom.o: ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-ClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-ClassAtom.Tpo -c -o librjungle_a-ClassAtom.o `test -f 'ClassAtom.cpp' || echo '$(srcdir)/'`ClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-ClassAtom.Tpo $(DEPDIR)/librjungle_a-ClassAtom.Po
#	source='ClassAtom.cpp' object='librjungle_a-ClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-ClassAtom.o `test -f 'ClassAtom.cpp' || echo '$(srcdir)/'`ClassAtom.cpp

librjungle_a-ClassAtom.obj: ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-ClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-ClassAtom.Tpo -c -o librjungle_a-ClassAtom.obj `if test -f 'ClassAtom.cpp'; then $(CYGPATH_W) 'ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/ClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-ClassAtom.Tpo $(DEPDIR)/librjungle_a-ClassAtom.Po
#	source='ClassAtom.cpp' object='librjungle_a-ClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-ClassAtom.obj `if test -f 'ClassAtom.cpp'; then $(CYGPATH_W) 'ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/ClassAtom.cpp'; fi`

librjungle_a-CmpldTree.o: CmpldTree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-CmpldTree.o -MD -MP -MF $(DEPDIR)/librjungle_a-CmpldTree.Tpo -c -o librjungle_a-CmpldTree.o `test -f 'CmpldTree.cpp' || echo '$(srcdir)/'`CmpldTree.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-CmpldTree.Tpo $(DEPDIR)/librjungle_a-CmpldTree.Po
#	source='CmpldTree.cpp' object='librjungle_a-CmpldTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-CmpldTree.o `test -f 'CmpldTree.cpp' || echo '$(srcdir)/'`CmpldTree.cpp

librjungle_a-CmpldTree.obj: CmpldTree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-CmpldTree.obj -MD -MP -MF $(DEPDIR)/librjungle_a-CmpldTree.Tpo -c -o librjungle_a-CmpldTree.obj `if test -f 'CmpldTree.cpp'; then $(CYGPATH_W) 'CmpldTree.cpp'; else $(CYGPATH_W) '$(srcdir)/CmpldTree.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-CmpldTree.Tpo $(DEPDIR)/librjungle_a-CmpldTree.Po
#	source='CmpldTree.cpp' object='librjungle_a-CmpldTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-CmpldTree.obj `if test -f 'CmpldTree.cpp'; then $(CYGPATH_W) 'CmpldTree.cpp'; else $(CYGPATH_W) '$(srcdir)/CmpldTree.cpp'; fi`

librjungle_a-CmplFct.o: CmplFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-CmplFct.o -MD -MP -MF $(DEPDIR)/librjungle_a-CmplFct.Tpo -c -o librjungle_a-CmplFct.o `test -f 'CmplFct.cpp' || echo '$(srcdir)/'`CmplFct.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-CmplFct.Tpo $(DEPDIR)/librjungle_a-CmplFct.Po
#	source='CmplFct.cpp' object='librjungle_a-CmplFct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-CmplFct.o `test -f 'CmplFct.cpp' || echo '$(srcdir)/'`CmplFct.cpp

librjungle_a-CmplFct.obj: CmplFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-CmplFct.obj -MD -MP -MF $(DEPDIR)/librjungle_a-CmplFct.Tpo -c -o librjungle_a-CmplFct.obj `if test -f 'CmplFct.cpp'; then $(CYGPATH_W) 'CmplFct.cpp'; else $(CYGPATH_W) '$(srcdir)/CmplFct.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-CmplFct.Tpo $(DEPDIR)/librjungle_a-CmplFct.Po
#	source='CmplFct.cpp' object='librjungle_a-CmplFct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-CmplFct.obj `if test -f 'CmplFct.cpp'; then $(CYGPATH_W) 'CmplFct.cpp'; else $(CYGPATH_W) '$(srcdir)/CmplFct.cpp'; fi`

librjungle_a-CondInf.o: CondInf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-CondInf.o -MD -MP -MF $(DEPDIR)/librjungle_a-CondInf.Tpo -c -o librjungle_a-CondInf.o `test -f 'CondInf.cpp' || echo '$(srcdir)/'`CondInf.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-CondInf.Tpo $(DEPDIR)/librjungle_a-CondInf.Po
#	source='CondInf.cpp' object='librjungle_a-CondInf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-CondInf.o `test -f 'CondInf.cpp' || echo '$(srcdir)/'`CondInf.cpp

librjungle_a-CondInf.obj: CondInf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-CondInf.obj -MD -MP -MF $(DEPDIR)/librjungle_a-CondInf.Tpo -c -o librjungle_a-CondInf.obj `if test -f 'CondInf.cpp'; then $(CYGPATH_W) 'CondInf.cpp'; else $(CYGPATH_W) '$(srcdir)/CondInf.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-CondInf.Tpo $(DEPDIR)/librjungle_a-CondInf.Po
#	source='CondInf.cpp' object='librjungle_a-CondInf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-CondInf.obj `if test -f 'CondInf.cpp'; then $(CYGPATH_W) 'CondInf.cpp'; else $(CYGPATH_W) '$(srcdir)/CondInf.cpp'; fi`

librjungle_a-IAM2WayImportance.o: IAM2WayImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-IAM2WayImportance.o -MD -MP -MF $(DEPDIR)/librjungle_a-IAM2WayImportance.Tpo -c -o librjungle_a-IAM2WayImportance.o `test -f 'IAM2WayImportance.cpp' || echo '$(srcdir)/'`IAM2WayImportance.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-IAM2WayImportance.Tpo $(DEPDIR)/librjungle_a-IAM2WayImportance.Po
#	source='IAM2WayImportance.cpp' object='librjungle_a-IAM2WayImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-IAM2WayImportance.o `test -f 'IAM2WayImportance.cpp' || echo '$(srcdir)/'`IAM2WayImportance.cpp

librjungle_a-IAM2WayImportance.obj: IAM2WayImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-IAM2WayImportance.obj -MD -MP -MF $(DEPDIR)/librjungle_a-IAM2WayImportance.Tpo -c -o librjungle_a-IAM2WayImportance.obj `if test -f 'IAM2WayImportance.cpp'; then $(CYGPATH_W) 'IAM2WayImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/IAM2WayImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-IAM2WayImportance.Tpo $(DEPDIR)/librjungle_a-IAM2WayImportance.Po
#	source='IAM2WayImportance.cpp' object='librjungle_a-IAM2WayImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-IAM2WayImportance.obj `if test -f 'IAM2WayImportance.cpp'; then $(CYGPATH_W) 'IAM2WayImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/IAM2WayImportance.cpp'; fi`

librjungle_a-IAMClassAtom.o: IAMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-IAMClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-IAMClassAtom.Tpo -c -o librjungle_a-IAMClassAtom.o `test -f 'IAMClassAtom.cpp' || echo '$(srcdir)/'`IAMClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-IAMClassAtom.Tpo $(DEPDIR)/librjungle_a-IAMClassAtom.Po
#	source='IAMClassAtom.cpp' object='librjungle_a-IAMClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-IAMClassAtom.o `test -f 'IAMClassAtom.cpp' || echo '$(srcdir)/'`IAMClassAtom.cpp

librjungle_a-IAMClassAtom.obj: IAMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-IAMClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-IAMClassAtom.Tpo -c -o librjungle_a-IAMClassAtom.obj `if test -f 'IAMClassAtom.cpp'; then $(CYGPATH_W) 'IAMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/IAMClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-IAMClassAtom.Tpo $(DEPDIR)/librjungle_a-IAMClassAtom.Po
#	source='IAMClassAtom.cpp' object='librjungle_a-IAMClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-IAMClassAtom.obj `if test -f 'IAMClassAtom.cpp'; then $(CYGPATH_W) 'IAMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/IAMClassAtom.cpp'; fi`

librjungle_a-Importance.o: Importance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Importance.o -MD -MP -MF $(DEPDIR)/librjungle_a-Importance.Tpo -c -o librjungle_a-Importance.o `test -f 'Importance.cpp' || echo '$(srcdir)/'`Importance.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Importance.Tpo $(DEPDIR)/librjungle_a-Importance.Po
#	source='Importance.cpp' object='librjungle_a-Importance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Importance.o `test -f 'Importance.cpp' || echo '$(srcdir)/'`Importance.cpp

librjungle_a-Importance.obj: Importance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Importance.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Importance.Tpo -c -o librjungle_a-Importance.obj `if test -f 'Importance.cpp'; then $(CYGPATH_W) 'Importance.cpp'; else $(CYGPATH_W) '$(srcdir)/Importance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Importance.Tpo $(DEPDIR)/librjungle_a-Importance.Po
#	source='Importance.cpp' object='librjungle_a-Importance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Importance.obj `if test -f 'Importance.cpp'; then $(CYGPATH_W) 'Importance.cpp'; else $(CYGPATH_W) '$(srcdir)/Importance.cpp'; fi`

librjungle_a-JTreeTweaks.o: JTreeTweaks.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-JTreeTweaks.o -MD -MP -MF $(DEPDIR)/librjungle_a-JTreeTweaks.Tpo -c -o librjungle_a-JTreeTweaks.o `test -f 'JTreeTweaks.cpp' || echo '$(srcdir)/'`JTreeTweaks.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-JTreeTweaks.Tpo $(DEPDIR)/librjungle_a-JTreeTweaks.Po
#	source='JTreeTweaks.cpp' object='librjungle_a-JTreeTweaks.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-JTreeTweaks.o `test -f 'JTreeTweaks.cpp' || echo '$(srcdir)/'`JTreeTweaks.cpp

librjungle_a-JTreeTweaks.obj: JTreeTweaks.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-JTreeTweaks.obj -MD -MP -MF $(DEPDIR)/librjungle_a-JTreeTweaks.Tpo -c -o librjungle_a-JTreeTweaks.obj `if test -f 'JTreeTweaks.cpp'; then $(CYGPATH_W) 'JTreeTweaks.cpp'; else $(CYGPATH_W) '$(srcdir)/JTreeTweaks.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-JTreeTweaks.Tpo $(DEPDIR)/librjungle_a-JTreeTweaks.Po
#	source='JTreeTweaks.cpp' object='librjungle_a-JTreeTweaks.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-JTreeTweaks.obj `if test -f 'JTreeTweaks.cpp'; then $(CYGPATH_W) 'JTreeTweaks.cpp'; else $(CYGPATH_W) '$(srcdir)/JTreeTweaks.cpp'; fi`

librjungle_a-TImportance.o: TImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TImportance.o -MD -MP -MF $(DEPDIR)/librjungle_a-TImportance.Tpo -c -o librjungle_a-TImportance.o `test -f 'TImportance.cpp' || echo '$(srcdir)/'`TImportance.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-TImportance.Tpo $(DEPDIR)/librjungle_a-TImportance.Po
#	source='TImportance.cpp' object='librjungle_a-TImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TImportance.o `test -f 'TImportance.cpp' || echo '$(srcdir)/'`TImportance.cpp

librjungle_a-TImportance.obj: TImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TImportance.obj -MD -MP -MF $(DEPDIR)/librjungle_a-TImportance.Tpo -c -o librjungle_a-TImportance.obj `if test -f 'TImportance.cpp'; then $(CYGPATH_W) 'TImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/TImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-TImportance.Tpo $(DEPDIR)/librjungle_a-TImportance.Po
#	source='TImportance.cpp' object='librjungle_a-TImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TImportance.obj `if test -f 'TImportance.cpp'; then $(CYGPATH_W) 'TImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/TImportance.cpp'; fi`

librjungle_a-RJungleTuneMtry.o: RJungleTuneMtry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleTuneMtry.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleTuneMtry.Tpo -c -o librjungle_a-RJungleTuneMtry.o `test -f 'RJungleTuneMtry.cpp' || echo '$(srcdir)/'`RJungleTuneMtry.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleTuneMtry.Tpo $(DEPDIR)/librjungle_a-RJungleTuneMtry.Po
#	source='RJungleTuneMtry.cpp' object='librjungle_a-RJungleTuneMtry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleTuneMtry.o `test -f 'RJungleTuneMtry.cpp' || echo '$(srcdir)/'`RJungleTuneMtry.cpp

librjungle_a-RJungleTuneMtry.obj: RJungleTuneMtry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleTuneMtry.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleTuneMtry.Tpo -c -o librjungle_a-RJungleTuneMtry.obj `if test -f 'RJungleTuneMtry.cpp'; then $(CYGPATH_W) 'RJungleTuneMtry.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleTuneMtry.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleTuneMtry.Tpo $(DEPDIR)/librjungle_a-RJungleTuneMtry.Po
#	source='RJungleTuneMtry.cpp' object='librjungle_a-RJungleTuneMtry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleTuneMtry.obj `if test -f 'RJungleTuneMtry.cpp'; then $(CYGPATH_W) 'RJungleTuneMtry.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleTuneMtry.cpp'; fi`

librjungle_a-RJungleOutlier.o: RJungleOutlier.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleOutlier.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleOutlier.Tpo -c -o librjungle_a-RJungleOutlier.o `test -f 'RJungleOutlier.cpp' || echo '$(srcdir)/'`RJungleOutlier.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleOutlier.Tpo $(DEPDIR)/librjungle_a-RJungleOutlier.Po
#	source='RJungleOutlier.cpp' object='librjungle_a-RJungleOutlier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleOutlier.o `test -f 'RJungleOutlier.cpp' || echo '$(srcdir)/'`RJungleOutlier.cpp

librjungle_a-RJungleOutlier.obj: RJungleOutlier.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleOutlier.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleOutlier.Tpo -c -o librjungle_a-RJungleOutlier.obj `if test -f 'RJungleOutlier.cpp'; then $(CYGPATH_W) 'RJungleOutlier.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleOutlier.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleOutlier.Tpo $(DEPDIR)/librjungle_a-RJungleOutlier.Po
#	source='RJungleOutlier.cpp' object='librjungle_a-RJungleOutlier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleOutlier.obj `if test -f 'RJungleOutlier.cpp'; then $(CYGPATH_W) 'RJungleOutlier.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleOutlier.cpp'; fi`

librjungle_a-RJungleProto.o: RJungleProto.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleProto.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleProto.Tpo -c -o librjungle_a-RJungleProto.o `test -f 'RJungleProto.cpp' || echo '$(srcdir)/'`RJungleProto.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleProto.Tpo $(DEPDIR)/librjungle_a-RJungleProto.Po
#	source='RJungleProto.cpp' object='librjungle_a-RJungleProto.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleProto.o `test -f 'RJungleProto.cpp' || echo '$(srcdir)/'`RJungleProto.cpp

librjungle_a-RJungleProto.obj: RJungleProto.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleProto.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleProto.Tpo -c -o librjungle_a-RJungleProto.obj `if test -f 'RJungleProto.cpp'; then $(CYGPATH_W) 'RJungleProto.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProto.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleProto.Tpo $(DEPDIR)/librjungle_a-RJungleProto.Po
#	source='RJungleProto.cpp' object='librjungle_a-RJungleProto.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleProto.obj `if test -f 'RJungleProto.cpp'; then $(CYGPATH_W) 'RJungleProto.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProto.cpp'; fi`

librjungle_a-DataFrame.o: DataFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-DataFrame.o -MD -MP -MF $(DEPDIR)/librjungle_a-DataFrame.Tpo -c -o librjungle_a-DataFrame.o `test -f 'DataFrame.cpp' || echo '$(srcdir)/'`DataFrame.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-DataFrame.Tpo $(DEPDIR)/librjungle_a-DataFrame.Po
#	source='DataFrame.cpp' object='librjungle_a-DataFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-DataFrame.o `test -f 'DataFrame.cpp' || echo '$(srcdir)/'`DataFrame.cpp

librjungle_a-DataFrame.obj: DataFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-DataFrame.obj -MD -MP -MF $(DEPDIR)/librjungle_a-DataFrame.Tpo -c -o librjungle_a-DataFrame.obj `if test -f 'DataFrame.cpp'; then $(CYGPATH_W) 'DataFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/DataFrame.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-DataFrame.Tpo $(DEPDIR)/librjungle_a-DataFrame.Po
#	source='DataFrame.cpp' object='librjungle_a-DataFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-DataFrame.obj `if test -f 'DataFrame.cpp'; then $(CYGPATH_W) 'DataFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/DataFrame.cpp'; fi`

librjungle_a-DataTreeSet.o: DataTreeSet.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-DataTreeSet.o -MD -MP -MF $(DEPDIR)/librjungle_a-DataTreeSet.Tpo -c -o librjungle_a-DataTreeSet.o `test -f 'DataTreeSet.cpp' || echo '$(srcdir)/'`DataTreeSet.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-DataTreeSet.Tpo $(DEPDIR)/librjungle_a-DataTreeSet.Po
#	source='DataTreeSet.cpp' object='librjungle_a-DataTreeSet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-DataTreeSet.o `test -f 'DataTreeSet.cpp' || echo '$(srcdir)/'`DataTreeSet.cpp

librjungle_a-DataTreeSet.obj: DataTreeSet.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-DataTreeSet.obj -MD -MP -MF $(DEPDIR)/librjungle_a-DataTreeSet.Tpo -c -o librjungle_a-DataTreeSet.obj `if test -f 'DataTreeSet.cpp'; then $(CYGPATH_W) 'DataTreeSet.cpp'; else $(CYGPATH_W) '$(srcdir)/DataTreeSet.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-DataTreeSet.Tpo $(DEPDIR)/librjungle_a-DataTreeSet.Po
#	source='DataTreeSet.cpp' object='librjungle_a-DataTreeSet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-DataTreeSet.obj `if test -f 'DataTreeSet.cpp'; then $(CYGPATH_W) 'DataTreeSet.cpp'; else $(CYGPATH_W) '$(srcdir)/DataTreeSet.cpp'; fi`

librjungle_a-Exception.o: Exception.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Exception.o -MD -MP -MF $(DEPDIR)/librjungle_a-Exception.Tpo -c -o librjungle_a-Exception.o `test -f 'Exception.cpp' || echo '$(srcdir)/'`Exception.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Exception.Tpo $(DEPDIR)/librjungle_a-Exception.Po
#	source='Exception.cpp' object='librjungle_a-Exception.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Exception.o `test -f 'Exception.cpp' || echo '$(srcdir)/'`Exception.cpp

librjungle_a-Exception.obj: Exception.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Exception.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Exception.Tpo -c -o librjungle_a-Exception.obj `if test -f 'Exception.cpp'; then $(CYGPATH_W) 'Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/Exception.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Exception.Tpo $(DEPDIR)/librjungle_a-Exception.Po
#	source='Exception.cpp' object='librjungle_a-Exception.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Exception.obj `if test -f 'Exception.cpp'; then $(CYGPATH_W) 'Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/Exception.cpp'; fi`

librjungle_a-FittingFct.o: FittingFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-FittingFct.o -MD -MP -MF $(DEPDIR)/librjungle_a-FittingFct.Tpo -c -o librjungle_a-FittingFct.o `test -f 'FittingFct.cpp' || echo '$(srcdir)/'`FittingFct.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-FittingFct.Tpo $(DEPDIR)/librjungle_a-FittingFct.Po
#	source='FittingFct.cpp' object='librjungle_a-FittingFct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-FittingFct.o `test -f 'FittingFct.cpp' || echo '$(srcdir)/'`FittingFct.cpp

librjungle_a-FittingFct.obj: FittingFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-FittingFct.obj -MD -MP -MF $(DEPDIR)/librjungle_a-FittingFct.Tpo -c -o librjungle_a-FittingFct.obj `if test -f 'FittingFct.cpp'; then $(CYGPATH_W) 'FittingFct.cpp'; else $(CYGPATH_W) '$(srcdir)/FittingFct.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-FittingFct.Tpo $(DEPDIR)/librjungle_a-FittingFct.Po
#	source='FittingFct.cpp' object='librjungle_a-FittingFct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-FittingFct.obj `if test -f 'FittingFct.cpp'; then $(CYGPATH_W) 'FittingFct.cpp'; else $(CYGPATH_W) '$(srcdir)/FittingFct.cpp'; fi`

librjungle_a-RJunglePrediction.o: RJunglePrediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJunglePrediction.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJunglePrediction.Tpo -c -o librjungle_a-RJunglePrediction.o `test -f 'RJunglePrediction.cpp' || echo '$(srcdir)/'`RJunglePrediction.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJunglePrediction.Tpo $(DEPDIR)/librjungle_a-RJunglePrediction.Po
#	source='RJunglePrediction.cpp' object='librjungle_a-RJunglePrediction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJunglePrediction.o `test -f 'RJunglePrediction.cpp' || echo '$(srcdir)/'`RJunglePrediction.cpp

librjungle_a-RJunglePrediction.obj: RJunglePrediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJunglePrediction.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJunglePrediction.Tpo -c -o librjungle_a-RJunglePrediction.obj `if test -f 'RJunglePrediction.cpp'; then $(CYGPATH_W) 'RJunglePrediction.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePrediction.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJunglePrediction.Tpo $(DEPDIR)/librjungle_a-RJunglePrediction.Po
#	source='RJunglePrediction.cpp' object='librjungle_a-RJunglePrediction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJunglePrediction.obj `if test -f 'RJunglePrediction.cpp'; then $(CYGPATH_W) 'RJunglePrediction.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePrediction.cpp'; fi`

librjungle_a-SaveCollector.o: SaveCollector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-SaveCollector.o -MD -MP -MF $(DEPDIR)/librjungle_a-SaveCollector.Tpo -c -o librjungle_a-SaveCollector.o `test -f 'SaveCollector.cpp' || echo '$(srcdir)/'`SaveCollector.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-SaveCollector.Tpo $(DEPDIR)/librjungle_a-SaveCollector.Po
#	source='SaveCollector.cpp' object='librjungle_a-SaveCollector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-SaveCollector.o `test -f 'SaveCollector.cpp' || echo '$(srcdir)/'`SaveCollector.cpp

librjungle_a-SaveCollector.obj: SaveCollector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-SaveCollector.obj -MD -MP -MF $(DEPDIR)/librjungle_a-SaveCollector.Tpo -c -o librjungle_a-SaveCollector.obj `if test -f 'SaveCollector.cpp'; then $(CYGPATH_W) 'SaveCollector.cpp'; else $(CYGPATH_W) '$(srcdir)/SaveCollector.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-SaveCollector.Tpo $(DEPDIR)/librjungle_a-SaveCollector.Po
#	source='SaveCollector.cpp' object='librjungle_a-SaveCollector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-SaveCollector.obj `if test -f 'SaveCollector.cpp'; then $(CYGPATH_W) 'SaveCollector.cpp'; else $(CYGPATH_W) '$(srcdir)/SaveCollector.cpp'; fi`

librjungle_a-PermImportance.o: PermImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-PermImportance.o -MD -MP -MF $(DEPDIR)/librjungle_a-PermImportance.Tpo -c -o librjungle_a-PermImportance.o `test -f 'PermImportance.cpp' || echo '$(srcdir)/'`PermImportance.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-PermImportance.Tpo $(DEPDIR)/librjungle_a-PermImportance.Po
#	source='PermImportance.cpp' object='librjungle_a-PermImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-PermImportance.o `test -f 'PermImportance.cpp' || echo '$(srcdir)/'`PermImportance.cpp

librjungle_a-PermImportance.obj: PermImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-PermImportance.obj -MD -MP -MF $(DEPDIR)/librjungle_a-PermImportance.Tpo -c -o librjungle_a-PermImportance.obj `if test -f 'PermImportance.cpp'; then $(CYGPATH_W) 'PermImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/PermImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-PermImportance.Tpo $(DEPDIR)/librjungle_a-PermImportance.Po
#	source='PermImportance.cpp' object='librjungle_a-PermImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-PermImportance.obj `if test -f 'PermImportance.cpp'; then $(CYGPATH_W) 'PermImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/PermImportance.cpp'; fi`

librjungle_a-Prediction.o: Prediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Prediction.o -MD -MP -MF $(DEPDIR)/librjungle_a-Prediction.Tpo -c -o librjungle_a-Prediction.o `test -f 'Prediction.cpp' || echo '$(srcdir)/'`Prediction.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Prediction.Tpo $(DEPDIR)/librjungle_a-Prediction.Po
#	source='Prediction.cpp' object='librjungle_a-Prediction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Prediction.o `test -f 'Prediction.cpp' || echo '$(srcdir)/'`Prediction.cpp

librjungle_a-Prediction.obj: Prediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Prediction.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Prediction.Tpo -c -o librjungle_a-Prediction.obj `if test -f 'Prediction.cpp'; then $(CYGPATH_W) 'Prediction.cpp'; else $(CYGPATH_W) '$(srcdir)/Prediction.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Prediction.Tpo $(DEPDIR)/librjungle_a-Prediction.Po
#	source='Prediction.cpp' object='librjungle_a-Prediction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Prediction.obj `if test -f 'Prediction.cpp'; then $(CYGPATH_W) 'Prediction.cpp'; else $(CYGPATH_W) '$(srcdir)/Prediction.cpp'; fi`

librjungle_a-ioLines.o: ioLines.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-ioLines.o -MD -MP -MF $(DEPDIR)/librjungle_a-ioLines.Tpo -c -o librjungle_a-ioLines.o `test -f 'ioLines.cpp' || echo '$(srcdir)/'`ioLines.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-ioLines.Tpo $(DEPDIR)/librjungle_a-ioLines.Po
#	source='ioLines.cpp' object='librjungle_a-ioLines.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-ioLines.o `test -f 'ioLines.cpp' || echo '$(srcdir)/'`ioLines.cpp

librjungle_a-ioLines.obj: ioLines.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-ioLines.obj -MD -MP -MF $(DEPDIR)/librjungle_a-ioLines.Tpo -c -o librjungle_a-ioLines.obj `if test -f 'ioLines.cpp'; then $(CYGPATH_W) 'ioLines.cpp'; else $(CYGPATH_W) '$(srcdir)/ioLines.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-ioLines.Tpo $(DEPDIR)/librjungle_a-ioLines.Po
#	source='ioLines.cpp' object='librjungle_a-ioLines.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-ioLines.obj `if test -f 'ioLines.cpp'; then $(CYGPATH_W) 'ioLines.cpp'; else $(CYGPATH_W) '$(srcdir)/ioLines.cpp'; fi`

librjungle_a-Generator.o: Generator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Generator.o -MD -MP -MF $(DEPDIR)/librjungle_a-Generator.Tpo -c -o librjungle_a-Generator.o `test -f 'Generator.cpp' || echo '$(srcdir)/'`Generator.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Generator.Tpo $(DEPDIR)/librjungle_a-Generator.Po
#	source='Generator.cpp' object='librjungle_a-Generator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Generator.o `test -f 'Generator.cpp' || echo '$(srcdir)/'`Generator.cpp

librjungle_a-Generator.obj: Generator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Generator.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Generator.Tpo -c -o librjungle_a-Generator.obj `if test -f 'Generator.cpp'; then $(CYGPATH_W) 'Generator.cpp'; else $(CYGPATH_W) '$(srcdir)/Generator.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Generator.Tpo $(DEPDIR)/librjungle_a-Generator.Po
#	source='Generator.cpp' object='librjungle_a-Generator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Generator.obj `if test -f 'Generator.cpp'; then $(CYGPATH_W) 'Generator.cpp'; else $(CYGPATH_W) '$(srcdir)/Generator.cpp'; fi`

librjungle_a-gzstream.o: gzstream.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-gzstream.o -MD -MP -MF $(DEPDIR)/librjungle_a-gzstream.Tpo -c -o librjungle_a-gzstream.o `test -f 'gzstream.cpp' || echo '$(srcdir)/'`gzstream.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-gzstream.Tpo $(DEPDIR)/librjungle_a-gzstream.Po
#	source='gzstream.cpp' object='librjungle_a-gzstream.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-gzstream.o `test -f 'gzstream.cpp' || echo '$(srcdir)/'`gzstream.cpp

librjungle_a-gzstream.obj: gzstream.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-gzstream.obj -MD -MP -MF $(DEPDIR)/librjungle_a-gzstream.Tpo -c -o librjungle_a-gzstream.obj `if test -f 'gzstream.cpp'; then $(CYGPATH_W) 'gzstream.cpp'; else $(CYGPATH_W) '$(srcdir)/gzstream.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-gzstream.Tpo $(DEPDIR)/librjungle_a-gzstream.Po
#	source='gzstream.cpp' object='librjungle_a-gzstream.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-gzstream.obj `if test -f 'gzstream.cpp'; then $(CYGPATH_W) 'gzstream.cpp'; else $(CYGPATH_W) '$(srcdir)/gzstream.cpp'; fi`

librjungle_a-Helper.o: Helper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Helper.o -MD -MP -MF $(DEPDIR)/librjungle_a-Helper.Tpo -c -o librjungle_a-Helper.o `test -f 'Helper.cpp' || echo '$(srcdir)/'`Helper.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Helper.Tpo $(DEPDIR)/librjungle_a-Helper.Po
#	source='Helper.cpp' object='librjungle_a-Helper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Helper.o `test -f 'Helper.cpp' || echo '$(srcdir)/'`Helper.cpp

librjungle_a-Helper.obj: Helper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Helper.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Helper.Tpo -c -o librjungle_a-Helper.obj `if test -f 'Helper.cpp'; then $(CYGPATH_W) 'Helper.cpp'; else $(CYGPATH_W) '$(srcdir)/Helper.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Helper.Tpo $(DEPDIR)/librjungle_a-Helper.Po
#	source='Helper.cpp' object='librjungle_a-Helper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Helper.obj `if test -f 'Helper.cpp'; then $(CYGPATH_W) 'Helper.cpp'; else $(CYGPATH_W) '$(srcdir)/Helper.cpp'; fi`

librjungle_a-INode.o: INode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-INode.o -MD -MP -MF $(DEPDIR)/librjungle_a-INode.Tpo -c -o librjungle_a-INode.o `test -f 'INode.cpp' || echo '$(srcdir)/'`INode.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-INode.Tpo $(DEPDIR)/librjungle_a-INode.Po
#	source='INode.cpp' object='librjungle_a-INode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-INode.o `test -f 'INode.cpp' || echo '$(srcdir)/'`INode.cpp

librjungle_a-INode.obj: INode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-INode.obj -MD -MP -MF $(DEPDIR)/librjungle_a-INode.Tpo -c -o librjungle_a-INode.obj `if test -f 'INode.cpp'; then $(CYGPATH_W) 'INode.cpp'; else $(CYGPATH_W) '$(srcdir)/INode.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-INode.Tpo $(DEPDIR)/librjungle_a-INode.Po
#	source='INode.cpp' object='librjungle_a-INode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-INode.obj `if test -f 'INode.cpp'; then $(CYGPATH_W) 'INode.cpp'; else $(CYGPATH_W) '$(srcdir)/INode.cpp'; fi`

librjungle_a-librjungle.o: librjungle.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-librjungle.o -MD -MP -MF $(DEPDIR)/librjungle_a-librjungle.Tpo -c -o librjungle_a-librjungle.o `test -f 'librjungle.cpp' || echo '$(srcdir)/'`librjungle.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-librjungle.Tpo $(DEPDIR)/librjungle_a-librjungle.Po
#	source='librjungle.cpp' object='librjungle_a-librjungle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-librjungle.o `test -f 'librjungle.cpp' || echo '$(srcdir)/'`librjungle.cpp

librjungle_a-librjungle.obj: librjungle.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-librjungle.obj -MD -MP -MF $(DEPDIR)/librjungle_a-librjungle.Tpo -c -o librjungle_a-librjungle.obj `if test -f 'librjungle.cpp'; then $(CYGPATH_W) 'librjungle.cpp'; else $(CYGPATH_W) '$(srcdir)/librjungle.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-librjungle.Tpo $(DEPDIR)/librjungle_a-librjungle.Po
#	source='librjungle.cpp' object='librjungle_a-librjungle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-librjungle.obj `if test -f 'librjungle.cpp'; then $(CYGPATH_W) 'librjungle.cpp'; else $(CYGPATH_W) '$(srcdir)/librjungle.cpp'; fi`

librjungle_a-Logistic.o: Logistic.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Logistic.o -MD -MP -MF $(DEPDIR)/librjungle_a-Logistic.Tpo -c -o librjungle_a-Logistic.o `test -f 'Logistic.cpp' || echo '$(srcdir)/'`Logistic.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Logistic.Tpo $(DEPDIR)/librjungle_a-Logistic.Po
#	source='Logistic.cpp' object='librjungle_a-Logistic.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Logistic.o `test -f 'Logistic.cpp' || echo '$(srcdir)/'`Logistic.cpp

librjungle_a-Logistic.obj: Logistic.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Logistic.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Logistic.Tpo -c -o librjungle_a-Logistic.obj `if test -f 'Logistic.cpp'; then $(CYGPATH_W) 'Logistic.cpp'; else $(CYGPATH_W) '$(srcdir)/Logistic.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Logistic.Tpo $(DEPDIR)/librjungle_a-Logistic.Po
#	source='Logistic.cpp' object='librjungle_a-Logistic.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Logistic.obj `if test -f 'Logistic.cpp'; then $(CYGPATH_W) 'Logistic.cpp'; else $(CYGPATH_W) '$(srcdir)/Logistic.cpp'; fi`

librjungle_a-Node.o: Node.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Node.o -MD -MP -MF $(DEPDIR)/librjungle_a-Node.Tpo -c -o librjungle_a-Node.o `test -f 'Node.cpp' || echo '$(srcdir)/'`Node.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Node.Tpo $(DEPDIR)/librjungle_a-Node.Po
#	source='Node.cpp' object='librjungle_a-Node.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Node.o `test -f 'Node.cpp' || echo '$(srcdir)/'`Node.cpp

librjungle_a-Node.obj: Node.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Node.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Node.Tpo -c -o librjungle_a-Node.obj `if test -f 'Node.cpp'; then $(CYGPATH_W) 'Node.cpp'; else $(CYGPATH_W) '$(srcdir)/Node.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Node.Tpo $(DEPDIR)/librjungle_a-Node.Po
#	source='Node.cpp' object='librjungle_a-Node.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Node.obj `if test -f 'Node.cpp'; then $(CYGPATH_W) 'Node.cpp'; else $(CYGPATH_W) '$(srcdir)/Node.cpp'; fi`

librjungle_a-Profiler.o: Profiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Profiler.o -MD -MP -MF $(DEPDIR)/librjungle_a-Profiler.Tpo -c -o librjungle_a-Profiler.o `test -f 'Profiler.cpp' || echo '$(srcdir)/'`Profiler.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Profiler.Tpo $(DEPDIR)/librjungle_a-Profiler.Po
#	source='Profiler.cpp' object='librjungle_a-Profiler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Profiler.o `test -f 'Profiler.cpp' || echo '$(srcdir)/'`Profiler.cpp

librjungle_a-Profiler.obj: Profiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Profiler.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Profiler.Tpo -c -o librjungle_a-Profiler.obj `if test -f 'Profiler.cpp'; then $(CYGPATH_W) 'Profiler.cpp'; else $(CYGPATH_W) '$(srcdir)/Profiler.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Profiler.Tpo $(DEPDIR)/librjungle_a-Profiler.Po
#	source='Profiler.cpp' object='librjungle_a-Profiler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Profiler.obj `if test -f 'Profiler.cpp'; then $(CYGPATH_W) 'Profiler.cpp'; else $(CYGPATH_W) '$(srcdir)/Profiler.cpp'; fi`

librjungle_a-Proximities.o: Proximities.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Proximities.o -MD -MP -MF $(DEPDIR)/librjungle_a-Proximities.Tpo -c -o librjungle_a-Proximities.o `test -f 'Proximities.cpp' || echo '$(srcdir)/'`Proximities.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Proximities.Tpo $(DEPDIR)/librjungle_a-Proximities.Po
#	source='Proximities.cpp' object='librjungle_a-Proximities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Proximities.o `test -f 'Proximities.cpp' || echo '$(srcdir)/'`Proximities.cpp

librjungle_a-Proximities.obj: Proximities.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Proximities.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Proximities.Tpo -c -o librjungle_a-Proximities.obj `if test -f 'Proximities.cpp'; then $(CYGPATH_W) 'Proximities.cpp'; else $(CYGPATH_W) '$(srcdir)/Proximities.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Proximities.Tpo $(DEPDIR)/librjungle_a-Proximities.Po
#	source='Proximities.cpp' object='librjungle_a-Proximities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Proximities.obj `if test -f 'Proximities.cpp'; then $(CYGPATH_W) 'Proximities.cpp'; else $(CYGPATH_W) '$(srcdir)/Proximities.cpp'; fi`

librjungle_a-RJungleAcc.o: RJungleAcc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleAcc.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleAcc.Tpo -c -o librjungle_a-RJungleAcc.o `test -f 'RJungleAcc.cpp' || echo '$(srcdir)/'`RJungleAcc.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleAcc.Tpo $(DEPDIR)/librjungle_a-RJungleAcc.Po
#	source='RJungleAcc.cpp' object='librjungle_a-RJungleAcc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleAcc.o `test -f 'RJungleAcc.cpp' || echo '$(srcdir)/'`RJungleAcc.cpp

librjungle_a-RJungleAcc.obj: RJungleAcc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleAcc.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleAcc.Tpo -c -o librjungle_a-RJungleAcc.obj `if test -f 'RJungleAcc.cpp'; then $(CYGPATH_W) 'RJungleAcc.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleAcc.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleAcc.Tpo $(DEPDIR)/librjungle_a-RJungleAcc.Po
#	source='RJungleAcc.cpp' object='librjungle_a-RJungleAcc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleAcc.obj `if test -f 'RJungleAcc.cpp'; then $(CYGPATH_W) 'RJungleAcc.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleAcc.cpp'; fi`

librjungle_a-RJungleBinder.o: RJungleBinder.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleBinder.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleBinder.Tpo -c -o librjungle_a-RJungleBinder.o `test -f 'RJungleBinder.cpp' || echo '$(srcdir)/'`RJungleBinder.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleBinder.Tpo $(DEPDIR)/librjungle_a-RJungleBinder.Po
#	source='RJungleBinder.cpp' object='librjungle_a-RJungleBinder.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleBinder.o `test -f 'RJungleBinder.cpp' || echo '$(srcdir)/'`RJungleBinder.cpp

librjungle_a-RJungleBinder.obj: RJungleBinder.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleBinder.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleBinder.Tpo -c -o librjungle_a-RJungleBinder.obj `if test -f 'RJungleBinder.cpp'; then $(CYGPATH_W) 'RJungleBinder.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleBinder.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleBinder.Tpo $(DEPDIR)/librjungle_a-RJungleBinder.Po
#	source='RJungleBinder.cpp' object='librjungle_a-RJungleBinder.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleBinder.obj `if test -f 'RJungleBinder.cpp'; then $(CYGPATH_W) 'RJungleBinder.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleBinder.cpp'; fi`

librjungle_a-RJungleCompiler.o: RJungleCompiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleCompiler.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleCompiler.Tpo -c -o librjungle_a-RJungleCompiler.o `test -f 'RJungleCompiler.cpp' || echo '$(srcdir)/'`RJungleCompiler.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleCompiler.Tpo $(DEPDIR)/librjungle_a-RJungleCompiler.Po
#	source='RJungleCompiler.cpp' object='librjungle_a-RJungleCompiler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleCompiler.o `test -f 'RJungleCompiler.cpp' || echo '$(srcdir)/'`RJungleCompiler.cpp

librjungle_a-RJungleCompiler.obj: RJungleCompiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleCompiler.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleCompiler.Tpo -c -o librjungle_a-RJungleCompiler.obj `if test -f 'RJungleCompiler.cpp'; then $(CYGPATH_W) 'RJungleCompiler.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCompiler.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleCompiler.Tpo $(DEPDIR)/librjungle_a-RJungleCompiler.Po
#	source='RJungleCompiler.cpp' object='librjungle_a-RJungleCompiler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleCompiler.obj `if test -f 'RJungleCompiler.cpp'; then $(CYGPATH_W) 'RJungleCompiler.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCompiler.cpp'; fi`

librjungle_a-RJungleConfusion.o: RJungleConfusion.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleConfusion.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleConfusion.Tpo -c -o librjungle_a-RJungleConfusion.o `test -f 'RJungleConfusion.cpp' || echo '$(srcdir)/'`RJungleConfusion.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleConfusion.Tpo $(DEPDIR)/librjungle_a-RJungleConfusion.Po
#	source='RJungleConfusion.cpp' object='librjungle_a-RJungleConfusion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleConfusion.o `test -f 'RJungleConfusion.cpp' || echo '$(srcdir)/'`RJungleConfusion.cpp

librjungle_a-RJungleConfusion.obj: RJungleConfusion.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleConfusion.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleConfusion.Tpo -c -o librjungle_a-RJungleConfusion.obj `if test -f 'RJungleConfusion.cpp'; then $(CYGPATH_W) 'RJungleConfusion.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleConfusion.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleConfusion.Tpo $(DEPDIR)/librjungle_a-RJungleConfusion.Po
#	source='RJungleConfusion.cpp' object='librjungle_a-RJungleConfusion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleConfusion.obj `if test -f 'RJungleConfusion.cpp'; then $(CYGPATH_W) 'RJungleConfusion.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleConfusion.cpp'; fi`

librjungle_a-RJungleCtrl.o: RJungleCtrl.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleCtrl.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleCtrl.Tpo -c -o librjungle_a-RJungleCtrl.o `test -f 'RJungleCtrl.cpp' || echo '$(srcdir)/'`RJungleCtrl.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleCtrl.Tpo $(DEPDIR)/librjungle_a-RJungleCtrl.Po
#	source='RJungleCtrl.cpp' object='librjungle_a-RJungleCtrl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleCtrl.o `test -f 'RJungleCtrl.cpp' || echo '$(srcdir)/'`RJungleCtrl.cpp

librjungle_a-RJungleCtrl.obj: RJungleCtrl.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleCtrl.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleCtrl.Tpo -c -o librjungle_a-RJungleCtrl.obj `if test -f 'RJungleCtrl.cpp'; then $(CYGPATH_W) 'RJungleCtrl.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCtrl.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleCtrl.Tpo $(DEPDIR)/librjungle_a-RJungleCtrl.Po
#	source='RJungleCtrl.cpp' object='librjungle_a-RJungleCtrl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleCtrl.obj `if test -f 'RJungleCtrl.cpp'; then $(CYGPATH_W) 'RJungleCtrl.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCtrl.cpp'; fi`

librjungle_a-RJungleFromXML.o: RJungleFromXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleFromXML.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleFromXML.Tpo -c -o librjungle_a-RJungleFromXML.o `test -f 'RJungleFromXML.cpp' || echo '$(srcdir)/'`RJungleFromXML.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleFromXML.Tpo $(DEPDIR)/librjungle_a-RJungleFromXML.Po
#	source='RJungleFromXML.cpp' object='librjungle_a-RJungleFromXML.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleFromXML.o `test -f 'RJungleFromXML.cpp' || echo '$(srcdir)/'`RJungleFromXML.cpp

librjungle_a-RJungleFromXML.obj: RJungleFromXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleFromXML.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleFromXML.Tpo -c -o librjungle_a-RJungleFromXML.obj `if test -f 'RJungleFromXML.cpp'; then $(CYGPATH_W) 'RJungleFromXML.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleFromXML.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleFromXML.Tpo $(DEPDIR)/librjungle_a-RJungleFromXML.Po
#	source='RJungleFromXML.cpp' object='librjungle_a-RJungleFromXML.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleFromXML.obj `if test -f 'RJungleFromXML.cpp'; then $(CYGPATH_W) 'RJungleFromXML.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleFromXML.cpp'; fi`

librjungle_a-RJungleGen.o: RJungleGen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleGen.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleGen.Tpo -c -o librjungle_a-RJungleGen.o `test -f 'RJungleGen.cpp' || echo '$(srcdir)/'`RJungleGen.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleGen.Tpo $(DEPDIR)/librjungle_a-RJungleGen.Po
#	source='RJungleGen.cpp' object='librjungle_a-RJungleGen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleGen.o `test -f 'RJungleGen.cpp' || echo '$(srcdir)/'`RJungleGen.cpp

librjungle_a-RJungleGen.obj: RJungleGen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleGen.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleGen.Tpo -c -o librjungle_a-RJungleGen.obj `if test -f 'RJungleGen.cpp'; then $(CYGPATH_W) 'RJungleGen.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGen.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleGen.Tpo $(DEPDIR)/librjungle_a-RJungleGen.Po
#	source='RJungleGen.cpp' object='librjungle_a-RJungleGen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleGen.obj `if test -f 'RJungleGen.cpp'; then $(CYGPATH_W) 'RJungleGen.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGen.cpp'; fi`

librjungle_a-RJungleGrow.o: RJungleGrow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleGrow.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleGrow.Tpo -c -o librjungle_a-RJungleGrow.o `test -f 'RJungleGrow.cpp' || echo '$(srcdir)/'`RJungleGrow.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleGrow.Tpo $(DEPDIR)/librjungle_a-RJungleGrow.Po
#	source='RJungleGrow.cpp' object='librjungle_a-RJungleGrow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleGrow.o `test -f 'RJungleGrow.cpp' || echo '$(srcdir)/'`RJungleGrow.cpp

librjungle_a-RJungleGrow.obj: RJungleGrow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleGrow.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleGrow.Tpo -c -o librjungle_a-RJungleGrow.obj `if test -f 'RJungleGrow.cpp'; then $(CYGPATH_W) 'RJungleGrow.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGrow.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleGrow.Tpo $(DEPDIR)/librjungle_a-RJungleGrow.Po
#	source='RJungleGrow.cpp' object='librjungle_a-RJungleGrow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleGrow.obj `if test -f 'RJungleGrow.cpp'; then $(CYGPATH_W) 'RJungleGrow.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGrow.cpp'; fi`

librjungle_a-RJungleHelper.o: RJungleHelper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleHelper.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleHelper.Tpo -c -o librjungle_a-RJungleHelper.o `test -f 'RJungleHelper.cpp' || echo '$(srcdir)/'`RJungleHelper.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleHelper.Tpo $(DEPDIR)/librjungle_a-RJungleHelper.Po
#	source='RJungleHelper.cpp' object='librjungle_a-RJungleHelper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleHelper.o `test -f 'RJungleHelper.cpp' || echo '$(srcdir)/'`RJungleHelper.cpp

librjungle_a-RJungleHelper.obj: RJungleHelper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleHelper.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleHelper.Tpo -c -o librjungle_a-RJungleHelper.obj `if test -f 'RJungleHelper.cpp'; then $(CYGPATH_W) 'RJungleHelper.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleHelper.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleHelper.Tpo $(DEPDIR)/librjungle_a-RJungleHelper.Po
#	source='RJungleHelper.cpp' object='librjungle_a-RJungleHelper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleHelper.obj `if test -f 'RJungleHelper.cpp'; then $(CYGPATH_W) 'RJungleHelper.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleHelper.cpp'; fi`

librjungle_a-RJungleImportance.o: RJungleImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleImportance.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleImportance.Tpo -c -o librjungle_a-RJungleImportance.o `test -f 'RJungleImportance.cpp' || echo '$(srcdir)/'`RJungleImportance.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleImportance.Tpo $(DEPDIR)/librjungle_a-RJungleImportance.Po
#	source='RJungleImportance.cpp' object='librjungle_a-RJungleImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleImportance.o `test -f 'RJungleImportance.cpp' || echo '$(srcdir)/'`RJungleImportance.cpp

librjungle_a-RJungleImportance.obj: RJungleImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleImportance.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleImportance.Tpo -c -o librjungle_a-RJungleImportance.obj `if test -f 'RJungleImportance.cpp'; then $(CYGPATH_W) 'RJungleImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleImportance.Tpo $(DEPDIR)/librjungle_a-RJungleImportance.Po
#	source='RJungleImportance.cpp' object='librjungle_a-RJungleImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleImportance.obj `if test -f 'RJungleImportance.cpp'; then $(CYGPATH_W) 'RJungleImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImportance.cpp'; fi`

librjungle_a-RJungleImpute.o: RJungleImpute.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleImpute.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleImpute.Tpo -c -o librjungle_a-RJungleImpute.o `test -f 'RJungleImpute.cpp' || echo '$(srcdir)/'`RJungleImpute.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleImpute.Tpo $(DEPDIR)/librjungle_a-RJungleImpute.Po
#	source='RJungleImpute.cpp' object='librjungle_a-RJungleImpute.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleImpute.o `test -f 'RJungleImpute.cpp' || echo '$(srcdir)/'`RJungleImpute.cpp

librjungle_a-RJungleImpute.obj: RJungleImpute.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleImpute.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleImpute.Tpo -c -o librjungle_a-RJungleImpute.obj `if test -f 'RJungleImpute.cpp'; then $(CYGPATH_W) 'RJungleImpute.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImpute.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleImpute.Tpo $(DEPDIR)/librjungle_a-RJungleImpute.Po
#	source='RJungleImpute.cpp' object='librjungle_a-RJungleImpute.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleImpute.obj `if test -f 'RJungleImpute.cpp'; then $(CYGPATH_W) 'RJungleImpute.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImpute.cpp'; fi`

librjungle_a-RJungleIO.o: RJungleIO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleIO.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleIO.Tpo -c -o librjungle_a-RJungleIO.o `test -f 'RJungleIO.cpp' || echo '$(srcdir)/'`RJungleIO.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleIO.Tpo $(DEPDIR)/librjungle_a-RJungleIO.Po
#	source='RJungleIO.cpp' object='librjungle_a-RJungleIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleIO.o `test -f 'RJungleIO.cpp' || echo '$(srcdir)/'`RJungleIO.cpp

librjungle_a-RJungleIO.obj: RJungleIO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleIO.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleIO.Tpo -c -o librjungle_a-RJungleIO.obj `if test -f 'RJungleIO.cpp'; then $(CYGPATH_W) 'RJungleIO.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleIO.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleIO.Tpo $(DEPDIR)/librjungle_a-RJungleIO.Po
#	source='RJungleIO.cpp' object='librjungle_a-RJungleIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleIO.obj `if test -f 'RJungleIO.cpp'; then $(CYGPATH_W) 'RJungleIO.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleIO.cpp'; fi`

librjungle_a-RJunglePar.o: RJunglePar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJunglePar.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJunglePar.Tpo -c -o librjungle_a-RJunglePar.o `test -f 'RJunglePar.cpp' || echo '$(srcdir)/'`RJunglePar.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJunglePar.Tpo $(DEPDIR)/librjungle_a-RJunglePar.Po
#	source='RJunglePar.cpp' object='librjungle_a-RJunglePar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJunglePar.o `test -f 'RJunglePar.cpp' || echo '$(srcdir)/'`RJunglePar.cpp

librjungle_a-RJunglePar.obj: RJunglePar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJunglePar.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJunglePar.Tpo -c -o librjungle_a-RJunglePar.obj `if test -f 'RJunglePar.cpp'; then $(CYGPATH_W) 'RJunglePar.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePar.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJunglePar.Tpo $(DEPDIR)/librjungle_a-RJunglePar.Po
#	source='RJunglePar.cpp' object='librjungle_a-RJunglePar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJunglePar.obj `if test -f 'RJunglePar.cpp'; then $(CYGPATH_W) 'RJunglePar.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePar.cpp'; fi`

librjungle_a-RJungleProxi.o: RJungleProxi.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleProxi.o -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleProxi.Tpo -c -o librjungle_a-RJungleProxi.o `test -f 'RJungleProxi.cpp' || echo '$(srcdir)/'`RJungleProxi.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleProxi.Tpo $(DEPDIR)/librjungle_a-RJungleProxi.Po
#	source='RJungleProxi.cpp' object='librjungle_a-RJungleProxi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleProxi.o `test -f 'RJungleProxi.cpp' || echo '$(srcdir)/'`RJungleProxi.cpp

librjungle_a-RJungleProxi.obj: RJungleProxi.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-RJungleProxi.obj -MD -MP -MF $(DEPDIR)/librjungle_a-RJungleProxi.Tpo -c -o librjungle_a-RJungleProxi.obj `if test -f 'RJungleProxi.cpp'; then $(CYGPATH_W) 'RJungleProxi.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProxi.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-RJungleProxi.Tpo $(DEPDIR)/librjungle_a-RJungleProxi.Po
#	source='RJungleProxi.cpp' object='librjungle_a-RJungleProxi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-RJungleProxi.obj `if test -f 'RJungleProxi.cpp'; then $(CYGPATH_W) 'RJungleProxi.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProxi.cpp'; fi`

librjungle_a-SClassAtom.o: SClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-SClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-SClassAtom.Tpo -c -o librjungle_a-SClassAtom.o `test -f 'SClassAtom.cpp' || echo '$(srcdir)/'`SClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-SClassAtom.Tpo $(DEPDIR)/librjungle_a-SClassAtom.Po
#	source='SClassAtom.cpp' object='librjungle_a-SClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-SClassAtom.o `test -f 'SClassAtom.cpp' || echo '$(srcdir)/'`SClassAtom.cpp

librjungle_a-SClassAtom.obj: SClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-SClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-SClassAtom.Tpo -c -o librjungle_a-SClassAtom.obj `if test -f 'SClassAtom.cpp'; then $(CYGPATH_W) 'SClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/SClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-SClassAtom.Tpo $(DEPDIR)/librjungle_a-SClassAtom.Po
#	source='SClassAtom.cpp' object='librjungle_a-SClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-SClassAtom.obj `if test -f 'SClassAtom.cpp'; then $(CYGPATH_W) 'SClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/SClassAtom.cpp'; fi`

librjungle_a-T2ClassAtom.o: T2ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-T2ClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-T2ClassAtom.Tpo -c -o librjungle_a-T2ClassAtom.o `test -f 'T2ClassAtom.cpp' || echo '$(srcdir)/'`T2ClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-T2ClassAtom.Tpo $(DEPDIR)/librjungle_a-T2ClassAtom.Po
#	source='T2ClassAtom.cpp' object='librjungle_a-T2ClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-T2ClassAtom.o `test -f 'T2ClassAtom.cpp' || echo '$(srcdir)/'`T2ClassAtom.cpp

librjungle_a-T2ClassAtom.obj: T2ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-T2ClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-T2ClassAtom.Tpo -c -o librjungle_a-T2ClassAtom.obj `if test -f 'T2ClassAtom.cpp'; then $(CYGPATH_W) 'T2ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/T2ClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-T2ClassAtom.Tpo $(DEPDIR)/librjungle_a-T2ClassAtom.Po
#	source='T2ClassAtom.cpp' object='librjungle_a-T2ClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-T2ClassAtom.obj `if test -f 'T2ClassAtom.cpp'; then $(CYGPATH_W) 'T2ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/T2ClassAtom.cpp'; fi`

librjungle_a-TermClassAtom.o: TermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TermClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-TermClassAtom.Tpo -c -o librjungle_a-TermClassAtom.o `test -f 'TermClassAtom.cpp' || echo '$(srcdir)/'`TermClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-TermClassAtom.Tpo $(DEPDIR)/librjungle_a-TermClassAtom.Po
#	source='TermClassAtom.cpp' object='librjungle_a-TermClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TermClassAtom.o `test -f 'TermClassAtom.cpp' || echo '$(srcdir)/'`TermClassAtom.cpp

librjungle_a-TermClassAtom.obj: TermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TermClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-TermClassAtom.Tpo -c -o librjungle_a-TermClassAtom.obj `if test -f 'TermClassAtom.cpp'; then $(CYGPATH_W) 'TermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TermClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-TermClassAtom.Tpo $(DEPDIR)/librjungle_a-TermClassAtom.Po
#	source='TermClassAtom.cpp' object='librjungle_a-TermClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TermClassAtom.obj `if test -f 'TermClassAtom.cpp'; then $(CYGPATH_W) 'TermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TermClassAtom.cpp'; fi`

librjungle_a-TermResult.o: TermResult.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TermResult.o -MD -MP -MF $(DEPDIR)/librjungle_a-TermResult.Tpo -c -o librjungle_a-TermResult.o `test -f 'TermResult.cpp' || echo '$(srcdir)/'`TermResult.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-TermResult.Tpo $(DEPDIR)/librjungle_a-TermResult.Po
#	source='TermResult.cpp' object='librjungle_a-TermResult.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TermResult.o `test -f 'TermResult.cpp' || echo '$(srcdir)/'`TermResult.cpp

librjungle_a-TermResult.obj: TermResult.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TermResult.obj -MD -MP -MF $(DEPDIR)/librjungle_a-TermResult.Tpo -c -o librjungle_a-TermResult.obj `if test -f 'TermResult.cpp'; then $(CYGPATH_W) 'TermResult.cpp'; else $(CYGPATH_W) '$(srcdir)/TermResult.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-TermResult.Tpo $(DEPDIR)/librjungle_a-TermResult.Po
#	source='TermResult.cpp' object='librjungle_a-TermResult.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TermResult.obj `if test -f 'TermResult.cpp'; then $(CYGPATH_W) 'TermResult.cpp'; else $(CYGPATH_W) '$(srcdir)/TermResult.cpp'; fi`

librjungle_a-TestClass.o: TestClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TestClass.o -MD -MP -MF $(DEPDIR)/librjungle_a-TestClass.Tpo -c -o librjungle_a-TestClass.o `test -f 'TestClass.cpp' || echo '$(srcdir)/'`TestClass.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-TestClass.Tpo $(DEPDIR)/librjungle_a-TestClass.Po
#	source='TestClass.cpp' object='librjungle_a-TestClass.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TestClass.o `test -f 'TestClass.cpp' || echo '$(srcdir)/'`TestClass.cpp

librjungle_a-TestClass.obj: TestClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TestClass.obj -MD -MP -MF $(DEPDIR)/librjungle_a-TestClass.Tpo -c -o librjungle_a-TestClass.obj `if test -f 'TestClass.cpp'; then $(CYGPATH_W) 'TestClass.cpp'; else $(CYGPATH_W) '$(srcdir)/TestClass.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-TestClass.Tpo $(DEPDIR)/librjungle_a-TestClass.Po
#	source='TestClass.cpp' object='librjungle_a-TestClass.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TestClass.obj `if test -f 'TestClass.cpp'; then $(CYGPATH_W) 'TestClass.cpp'; else $(CYGPATH_W) '$(srcdir)/TestClass.cpp'; fi`

librjungle_a-LotusTermClassAtom.o: LotusTermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-LotusTermClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-LotusTermClassAtom.Tpo -c -o librjungle_a-LotusTermClassAtom.o `test -f 'LotusTermClassAtom.cpp' || echo '$(srcdir)/'`LotusTermClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-LotusTermClassAtom.Tpo $(DEPDIR)/librjungle_a-LotusTermClassAtom.Po
#	source='LotusTermClassAtom.cpp' object='librjungle_a-LotusTermClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-LotusTermClassAtom.o `test -f 'LotusTermClassAtom.cpp' || echo '$(srcdir)/'`LotusTermClassAtom.cpp

librjungle_a-LotusTermClassAtom.obj: LotusTermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-LotusTermClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-LotusTermClassAtom.Tpo -c -o librjungle_a-LotusTermClassAtom.obj `if test -f 'LotusTermClassAtom.cpp'; then $(CYGPATH_W) 'LotusTermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/LotusTermClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-LotusTermClassAtom.Tpo $(DEPDIR)/librjungle_a-LotusTermClassAtom.Po
#	source='LotusTermClassAtom.cpp' object='librjungle_a-LotusTermClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-LotusTermClassAtom.obj `if test -f 'LotusTermClassAtom.cpp'; then $(CYGPATH_W) 'LotusTermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/LotusTermClassAtom.cpp'; fi`

librjungle_a-TimeProf.o: TimeProf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TimeProf.o -MD -MP -MF $(DEPDIR)/librjungle_a-TimeProf.Tpo -c -o librjungle_a-TimeProf.o `test -f 'TimeProf.cpp' || echo '$(srcdir)/'`TimeProf.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-TimeProf.Tpo $(DEPDIR)/librjungle_a-TimeProf.Po
#	source='TimeProf.cpp' object='librjungle_a-TimeProf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TimeProf.o `test -f 'TimeProf.cpp' || echo '$(srcdir)/'`TimeProf.cpp

librjungle_a-TimeProf.obj: TimeProf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TimeProf.obj -MD -MP -MF $(DEPDIR)/librjungle_a-TimeProf.Tpo -c -o librjungle_a-TimeProf.obj `if test -f 'TimeProf.cpp'; then $(CYGPATH_W) 'TimeProf.cpp'; else $(CYGPATH_W) '$(srcdir)/TimeProf.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-TimeProf.Tpo $(DEPDIR)/librjungle_a-TimeProf.Po
#	source='TimeProf.cpp' object='librjungle_a-TimeProf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TimeProf.obj `if test -f 'TimeProf.cpp'; then $(CYGPATH_W) 'TimeProf.cpp'; else $(CYGPATH_W) '$(srcdir)/TimeProf.cpp'; fi`

librjungle_a-TMClassAtom.o: TMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TMClassAtom.o -MD -MP -MF $(DEPDIR)/librjungle_a-TMClassAtom.Tpo -c -o librjungle_a-TMClassAtom.o `test -f 'TMClassAtom.cpp' || echo '$(srcdir)/'`TMClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-TMClassAtom.Tpo $(DEPDIR)/librjungle_a-TMClassAtom.Po
#	source='TMClassAtom.cpp' object='librjungle_a-TMClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TMClassAtom.o `test -f 'TMClassAtom.cpp' || echo '$(srcdir)/'`TMClassAtom.cpp

librjungle_a-TMClassAtom.obj: TMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-TMClassAtom.obj -MD -MP -MF $(DEPDIR)/librjungle_a-TMClassAtom.Tpo -c -o librjungle_a-TMClassAtom.obj `if test -f 'TMClassAtom.cpp'; then $(CYGPATH_W) 'TMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TMClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-TMClassAtom.Tpo $(DEPDIR)/librjungle_a-TMClassAtom.Po
#	source='TMClassAtom.cpp' object='librjungle_a-TMClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-TMClassAtom.obj `if test -f 'TMClassAtom.cpp'; then $(CYGPATH_W) 'TMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TMClassAtom.cpp'; fi`

librjungle_a-Tree.o: Tree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Tree.o -MD -MP -MF $(DEPDIR)/librjungle_a-Tree.Tpo -c -o librjungle_a-Tree.o `test -f 'Tree.cpp' || echo '$(srcdir)/'`Tree.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-Tree.Tpo $(DEPDIR)/librjungle_a-Tree.Po
#	source='Tree.cpp' object='librjungle_a-Tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Tree.o `test -f 'Tree.cpp' || echo '$(srcdir)/'`Tree.cpp

librjungle_a-Tree.obj: Tree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-Tree.obj -MD -MP -MF $(DEPDIR)/librjungle_a-Tree.Tpo -c -o librjungle_a-Tree.obj `if test -f 'Tree.cpp'; then $(CYGPATH_W) 'Tree.cpp'; else $(CYGPATH_W) '$(srcdir)/Tree.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-Tree.Tpo $(DEPDIR)/librjungle_a-Tree.Po
#	source='Tree.cpp' object='librjungle_a-Tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-Tree.obj `if test -f 'Tree.cpp'; then $(CYGPATH_W) 'Tree.cpp'; else $(CYGPATH_W) '$(srcdir)/Tree.cpp'; fi`

librjungle_a-mvt.o: mvt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-mvt.o -MD -MP -MF $(DEPDIR)/librjungle_a-mvt.Tpo -c -o librjungle_a-mvt.o `test -f 'mvt.cpp' || echo '$(srcdir)/'`mvt.cpp
	$(am__mv) $(DEPDIR)/librjungle_a-mvt.Tpo $(DEPDIR)/librjungle_a-mvt.Po
#	source='mvt.cpp' object='librjungle_a-mvt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-mvt.o `test -f 'mvt.cpp' || echo '$(srcdir)/'`mvt.cpp

librjungle_a-mvt.obj: mvt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjungle_a-mvt.obj -MD -MP -MF $(DEPDIR)/librjungle_a-mvt.Tpo -c -o librjungle_a-mvt.obj `if test -f 'mvt.cpp'; then $(CYGPATH_W) 'mvt.cpp'; else $(CYGPATH_W) '$(srcdir)/mvt.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjungle_a-mvt.Tpo $(DEPDIR)/librjungle_a-mvt.Po
#	source='mvt.cpp' object='librjungle_a-mvt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjungle_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjungle_a-mvt.obj `if test -f 'mvt.cpp'; then $(CYGPATH_W) 'mvt.cpp'; else $(CYGPATH_W) '$(srcdir)/mvt.cpp'; fi`

librjunglesparse_a-BitMatrix.o: BitMatrix.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-BitMatrix.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-BitMatrix.Tpo -c -o librjunglesparse_a-BitMatrix.o `test -f 'BitMatrix.cpp' || echo '$(srcdir)/'`BitMatrix.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-BitMatrix.Tpo $(DEPDIR)/librjunglesparse_a-BitMatrix.Po
#	source='BitMatrix.cpp' object='librjunglesparse_a-BitMatrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-BitMatrix.o `test -f 'BitMatrix.cpp' || echo '$(srcdir)/'`BitMatrix.cpp

librjunglesparse_a-BitMatrix.obj: BitMatrix.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-BitMatrix.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-BitMatrix.Tpo -c -o librjunglesparse_a-BitMatrix.obj `if test -f 'BitMatrix.cpp'; then $(CYGPATH_W) 'BitMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/BitMatrix.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-BitMatrix.Tpo $(DEPDIR)/librjunglesparse_a-BitMatrix.Po
#	source='BitMatrix.cpp' object='librjunglesparse_a-BitMatrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-BitMatrix.obj `if test -f 'BitMatrix.cpp'; then $(CYGPATH_W) 'BitMatrix.cpp'; else $(CYGPATH_W) '$(srcdir)/BitMatrix.cpp'; fi`

librjunglesparse_a-BuildinGenerators.o: BuildinGenerators.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-BuildinGenerators.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-BuildinGenerators.Tpo -c -o librjunglesparse_a-BuildinGenerators.o `test -f 'BuildinGenerators.cpp' || echo '$(srcdir)/'`BuildinGenerators.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-BuildinGenerators.Tpo $(DEPDIR)/librjunglesparse_a-BuildinGenerators.Po
#	source='BuildinGenerators.cpp' object='librjunglesparse_a-BuildinGenerators.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-BuildinGenerators.o `test -f 'BuildinGenerators.cpp' || echo '$(srcdir)/'`BuildinGenerators.cpp

librjunglesparse_a-BuildinGenerators.obj: BuildinGenerators.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-BuildinGenerators.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-BuildinGenerators.Tpo -c -o librjunglesparse_a-BuildinGenerators.obj `if test -f 'BuildinGenerators.cpp'; then $(CYGPATH_W) 'BuildinGenerators.cpp'; else $(CYGPATH_W) '$(srcdir)/BuildinGenerators.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-BuildinGenerators.Tpo $(DEPDIR)/librjunglesparse_a-BuildinGenerators.Po
#	source='BuildinGenerators.cpp' object='librjunglesparse_a-BuildinGenerators.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-BuildinGenerators.obj `if test -f 'BuildinGenerators.cpp'; then $(CYGPATH_W) 'BuildinGenerators.cpp'; else $(CYGPATH_W) '$(srcdir)/BuildinGenerators.cpp'; fi`

librjunglesparse_a-ClassAtom.o: ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-ClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-ClassAtom.Tpo -c -o librjunglesparse_a-ClassAtom.o `test -f 'ClassAtom.cpp' || echo '$(srcdir)/'`ClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-ClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-ClassAtom.Po
#	source='ClassAtom.cpp' object='librjunglesparse_a-ClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-ClassAtom.o `test -f 'ClassAtom.cpp' || echo '$(srcdir)/'`ClassAtom.cpp

librjunglesparse_a-ClassAtom.obj: ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-ClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-ClassAtom.Tpo -c -o librjunglesparse_a-ClassAtom.obj `if test -f 'ClassAtom.cpp'; then $(CYGPATH_W) 'ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/ClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-ClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-ClassAtom.Po
#	source='ClassAtom.cpp' object='librjunglesparse_a-ClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-ClassAtom.obj `if test -f 'ClassAtom.cpp'; then $(CYGPATH_W) 'ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/ClassAtom.cpp'; fi`

librjunglesparse_a-CmpldTree.o: CmpldTree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-CmpldTree.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-CmpldTree.Tpo -c -o librjunglesparse_a-CmpldTree.o `test -f 'CmpldTree.cpp' || echo '$(srcdir)/'`CmpldTree.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-CmpldTree.Tpo $(DEPDIR)/librjunglesparse_a-CmpldTree.Po
#	source='CmpldTree.cpp' object='librjunglesparse_a-CmpldTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-CmpldTree.o `test -f 'CmpldTree.cpp' || echo '$(srcdir)/'`CmpldTree.cpp

librjunglesparse_a-CmpldTree.obj: CmpldTree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-CmpldTree.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-CmpldTree.Tpo -c -o librjunglesparse_a-CmpldTree.obj `if test -f 'CmpldTree.cpp'; then $(CYGPATH_W) 'CmpldTree.cpp'; else $(CYGPATH_W) '$(srcdir)/CmpldTree.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-CmpldTree.Tpo $(DEPDIR)/librjunglesparse_a-CmpldTree.Po
#	source='CmpldTree.cpp' object='librjunglesparse_a-CmpldTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-CmpldTree.obj `if test -f 'CmpldTree.cpp'; then $(CYGPATH_W) 'CmpldTree.cpp'; else $(CYGPATH_W) '$(srcdir)/CmpldTree.cpp'; fi`

librjunglesparse_a-CmplFct.o: CmplFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-CmplFct.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-CmplFct.Tpo -c -o librjunglesparse_a-CmplFct.o `test -f 'CmplFct.cpp' || echo '$(srcdir)/'`CmplFct.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-CmplFct.Tpo $(DEPDIR)/librjunglesparse_a-CmplFct.Po
#	source='CmplFct.cpp' object='librjunglesparse_a-CmplFct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-CmplFct.o `test -f 'CmplFct.cpp' || echo '$(srcdir)/'`CmplFct.cpp

librjunglesparse_a-CmplFct.obj: CmplFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-CmplFct.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-CmplFct.Tpo -c -o librjunglesparse_a-CmplFct.obj `if test -f 'CmplFct.cpp'; then $(CYGPATH_W) 'CmplFct.cpp'; else $(CYGPATH_W) '$(srcdir)/CmplFct.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-CmplFct.Tpo $(DEPDIR)/librjunglesparse_a-CmplFct.Po
#	source='CmplFct.cpp' object='librjunglesparse_a-CmplFct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-CmplFct.obj `if test -f 'CmplFct.cpp'; then $(CYGPATH_W) 'CmplFct.cpp'; else $(CYGPATH_W) '$(srcdir)/CmplFct.cpp'; fi`

librjunglesparse_a-CondInf.o: CondInf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-CondInf.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-CondInf.Tpo -c -o librjunglesparse_a-CondInf.o `test -f 'CondInf.cpp' || echo '$(srcdir)/'`CondInf.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-CondInf.Tpo $(DEPDIR)/librjunglesparse_a-CondInf.Po
#	source='CondInf.cpp' object='librjunglesparse_a-CondInf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-CondInf.o `test -f 'CondInf.cpp' || echo '$(srcdir)/'`CondInf.cpp

librjunglesparse_a-CondInf.obj: CondInf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-CondInf.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-CondInf.Tpo -c -o librjunglesparse_a-CondInf.obj `if test -f 'CondInf.cpp'; then $(CYGPATH_W) 'CondInf.cpp'; else $(CYGPATH_W) '$(srcdir)/CondInf.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-CondInf.Tpo $(DEPDIR)/librjunglesparse_a-CondInf.Po
#	source='CondInf.cpp' object='librjunglesparse_a-CondInf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-CondInf.obj `if test -f 'CondInf.cpp'; then $(CYGPATH_W) 'CondInf.cpp'; else $(CYGPATH_W) '$(srcdir)/CondInf.cpp'; fi`

librjunglesparse_a-IAM2WayImportance.o: IAM2WayImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-IAM2WayImportance.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Tpo -c -o librjunglesparse_a-IAM2WayImportance.o `test -f 'IAM2WayImportance.cpp' || echo '$(srcdir)/'`IAM2WayImportance.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Tpo $(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Po
#	source='IAM2WayImportance.cpp' object='librjunglesparse_a-IAM2WayImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-IAM2WayImportance.o `test -f 'IAM2WayImportance.cpp' || echo '$(srcdir)/'`IAM2WayImportance.cpp

librjunglesparse_a-IAM2WayImportance.obj: IAM2WayImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-IAM2WayImportance.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Tpo -c -o librjunglesparse_a-IAM2WayImportance.obj `if test -f 'IAM2WayImportance.cpp'; then $(CYGPATH_W) 'IAM2WayImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/IAM2WayImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Tpo $(DEPDIR)/librjunglesparse_a-IAM2WayImportance.Po
#	source='IAM2WayImportance.cpp' object='librjunglesparse_a-IAM2WayImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-IAM2WayImportance.obj `if test -f 'IAM2WayImportance.cpp'; then $(CYGPATH_W) 'IAM2WayImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/IAM2WayImportance.cpp'; fi`

librjunglesparse_a-IAMClassAtom.o: IAMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-IAMClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-IAMClassAtom.Tpo -c -o librjunglesparse_a-IAMClassAtom.o `test -f 'IAMClassAtom.cpp' || echo '$(srcdir)/'`IAMClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-IAMClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-IAMClassAtom.Po
#	source='IAMClassAtom.cpp' object='librjunglesparse_a-IAMClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-IAMClassAtom.o `test -f 'IAMClassAtom.cpp' || echo '$(srcdir)/'`IAMClassAtom.cpp

librjunglesparse_a-IAMClassAtom.obj: IAMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-IAMClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-IAMClassAtom.Tpo -c -o librjunglesparse_a-IAMClassAtom.obj `if test -f 'IAMClassAtom.cpp'; then $(CYGPATH_W) 'IAMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/IAMClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-IAMClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-IAMClassAtom.Po
#	source='IAMClassAtom.cpp' object='librjunglesparse_a-IAMClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-IAMClassAtom.obj `if test -f 'IAMClassAtom.cpp'; then $(CYGPATH_W) 'IAMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/IAMClassAtom.cpp'; fi`

librjunglesparse_a-Importance.o: Importance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Importance.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Importance.Tpo -c -o librjunglesparse_a-Importance.o `test -f 'Importance.cpp' || echo '$(srcdir)/'`Importance.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Importance.Tpo $(DEPDIR)/librjunglesparse_a-Importance.Po
#	source='Importance.cpp' object='librjunglesparse_a-Importance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Importance.o `test -f 'Importance.cpp' || echo '$(srcdir)/'`Importance.cpp

librjunglesparse_a-Importance.obj: Importance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Importance.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Importance.Tpo -c -o librjunglesparse_a-Importance.obj `if test -f 'Importance.cpp'; then $(CYGPATH_W) 'Importance.cpp'; else $(CYGPATH_W) '$(srcdir)/Importance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Importance.Tpo $(DEPDIR)/librjunglesparse_a-Importance.Po
#	source='Importance.cpp' object='librjunglesparse_a-Importance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Importance.obj `if test -f 'Importance.cpp'; then $(CYGPATH_W) 'Importance.cpp'; else $(CYGPATH_W) '$(srcdir)/Importance.cpp'; fi`

librjunglesparse_a-JTreeTweaks.o: JTreeTweaks.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-JTreeTweaks.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-JTreeTweaks.Tpo -c -o librjunglesparse_a-JTreeTweaks.o `test -f 'JTreeTweaks.cpp' || echo '$(srcdir)/'`JTreeTweaks.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-JTreeTweaks.Tpo $(DEPDIR)/librjunglesparse_a-JTreeTweaks.Po
#	source='JTreeTweaks.cpp' object='librjunglesparse_a-JTreeTweaks.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-JTreeTweaks.o `test -f 'JTreeTweaks.cpp' || echo '$(srcdir)/'`JTreeTweaks.cpp

librjunglesparse_a-JTreeTweaks.obj: JTreeTweaks.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-JTreeTweaks.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-JTreeTweaks.Tpo -c -o librjunglesparse_a-JTreeTweaks.obj `if test -f 'JTreeTweaks.cpp'; then $(CYGPATH_W) 'JTreeTweaks.cpp'; else $(CYGPATH_W) '$(srcdir)/JTreeTweaks.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-JTreeTweaks.Tpo $(DEPDIR)/librjunglesparse_a-JTreeTweaks.Po
#	source='JTreeTweaks.cpp' object='librjunglesparse_a-JTreeTweaks.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-JTreeTweaks.obj `if test -f 'JTreeTweaks.cpp'; then $(CYGPATH_W) 'JTreeTweaks.cpp'; else $(CYGPATH_W) '$(srcdir)/JTreeTweaks.cpp'; fi`

librjunglesparse_a-TImportance.o: TImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TImportance.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TImportance.Tpo -c -o librjunglesparse_a-TImportance.o `test -f 'TImportance.cpp' || echo '$(srcdir)/'`TImportance.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TImportance.Tpo $(DEPDIR)/librjunglesparse_a-TImportance.Po
#	source='TImportance.cpp' object='librjunglesparse_a-TImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TImportance.o `test -f 'TImportance.cpp' || echo '$(srcdir)/'`TImportance.cpp

librjunglesparse_a-TImportance.obj: TImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TImportance.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TImportance.Tpo -c -o librjunglesparse_a-TImportance.obj `if test -f 'TImportance.cpp'; then $(CYGPATH_W) 'TImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/TImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TImportance.Tpo $(DEPDIR)/librjunglesparse_a-TImportance.Po
#	source='TImportance.cpp' object='librjunglesparse_a-TImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TImportance.obj `if test -f 'TImportance.cpp'; then $(CYGPATH_W) 'TImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/TImportance.cpp'; fi`

librjunglesparse_a-RJungleTuneMtry.o: RJungleTuneMtry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleTuneMtry.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Tpo -c -o librjunglesparse_a-RJungleTuneMtry.o `test -f 'RJungleTuneMtry.cpp' || echo '$(srcdir)/'`RJungleTuneMtry.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Tpo $(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Po
#	source='RJungleTuneMtry.cpp' object='librjunglesparse_a-RJungleTuneMtry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleTuneMtry.o `test -f 'RJungleTuneMtry.cpp' || echo '$(srcdir)/'`RJungleTuneMtry.cpp

librjunglesparse_a-RJungleTuneMtry.obj: RJungleTuneMtry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleTuneMtry.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Tpo -c -o librjunglesparse_a-RJungleTuneMtry.obj `if test -f 'RJungleTuneMtry.cpp'; then $(CYGPATH_W) 'RJungleTuneMtry.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleTuneMtry.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Tpo $(DEPDIR)/librjunglesparse_a-RJungleTuneMtry.Po
#	source='RJungleTuneMtry.cpp' object='librjunglesparse_a-RJungleTuneMtry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleTuneMtry.obj `if test -f 'RJungleTuneMtry.cpp'; then $(CYGPATH_W) 'RJungleTuneMtry.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleTuneMtry.cpp'; fi`

librjunglesparse_a-RJungleOutlier.o: RJungleOutlier.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleOutlier.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleOutlier.Tpo -c -o librjunglesparse_a-RJungleOutlier.o `test -f 'RJungleOutlier.cpp' || echo '$(srcdir)/'`RJungleOutlier.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleOutlier.Tpo $(DEPDIR)/librjunglesparse_a-RJungleOutlier.Po
#	source='RJungleOutlier.cpp' object='librjunglesparse_a-RJungleOutlier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleOutlier.o `test -f 'RJungleOutlier.cpp' || echo '$(srcdir)/'`RJungleOutlier.cpp

librjunglesparse_a-RJungleOutlier.obj: RJungleOutlier.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleOutlier.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleOutlier.Tpo -c -o librjunglesparse_a-RJungleOutlier.obj `if test -f 'RJungleOutlier.cpp'; then $(CYGPATH_W) 'RJungleOutlier.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleOutlier.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleOutlier.Tpo $(DEPDIR)/librjunglesparse_a-RJungleOutlier.Po
#	source='RJungleOutlier.cpp' object='librjunglesparse_a-RJungleOutlier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleOutlier.obj `if test -f 'RJungleOutlier.cpp'; then $(CYGPATH_W) 'RJungleOutlier.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleOutlier.cpp'; fi`

librjunglesparse_a-RJungleProto.o: RJungleProto.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleProto.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleProto.Tpo -c -o librjunglesparse_a-RJungleProto.o `test -f 'RJungleProto.cpp' || echo '$(srcdir)/'`RJungleProto.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleProto.Tpo $(DEPDIR)/librjunglesparse_a-RJungleProto.Po
#	source='RJungleProto.cpp' object='librjunglesparse_a-RJungleProto.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleProto.o `test -f 'RJungleProto.cpp' || echo '$(srcdir)/'`RJungleProto.cpp

librjunglesparse_a-RJungleProto.obj: RJungleProto.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleProto.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleProto.Tpo -c -o librjunglesparse_a-RJungleProto.obj `if test -f 'RJungleProto.cpp'; then $(CYGPATH_W) 'RJungleProto.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProto.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleProto.Tpo $(DEPDIR)/librjunglesparse_a-RJungleProto.Po
#	source='RJungleProto.cpp' object='librjunglesparse_a-RJungleProto.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleProto.obj `if test -f 'RJungleProto.cpp'; then $(CYGPATH_W) 'RJungleProto.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProto.cpp'; fi`

librjunglesparse_a-DataFrame.o: DataFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-DataFrame.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-DataFrame.Tpo -c -o librjunglesparse_a-DataFrame.o `test -f 'DataFrame.cpp' || echo '$(srcdir)/'`DataFrame.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-DataFrame.Tpo $(DEPDIR)/librjunglesparse_a-DataFrame.Po
#	source='DataFrame.cpp' object='librjunglesparse_a-DataFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-DataFrame.o `test -f 'DataFrame.cpp' || echo '$(srcdir)/'`DataFrame.cpp

librjunglesparse_a-DataFrame.obj: DataFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-DataFrame.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-DataFrame.Tpo -c -o librjunglesparse_a-DataFrame.obj `if test -f 'DataFrame.cpp'; then $(CYGPATH_W) 'DataFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/DataFrame.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-DataFrame.Tpo $(DEPDIR)/librjunglesparse_a-DataFrame.Po
#	source='DataFrame.cpp' object='librjunglesparse_a-DataFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-DataFrame.obj `if test -f 'DataFrame.cpp'; then $(CYGPATH_W) 'DataFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/DataFrame.cpp'; fi`

librjunglesparse_a-DataTreeSet.o: DataTreeSet.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-DataTreeSet.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-DataTreeSet.Tpo -c -o librjunglesparse_a-DataTreeSet.o `test -f 'DataTreeSet.cpp' || echo '$(srcdir)/'`DataTreeSet.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-DataTreeSet.Tpo $(DEPDIR)/librjunglesparse_a-DataTreeSet.Po
#	source='DataTreeSet.cpp' object='librjunglesparse_a-DataTreeSet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-DataTreeSet.o `test -f 'DataTreeSet.cpp' || echo '$(srcdir)/'`DataTreeSet.cpp

librjunglesparse_a-DataTreeSet.obj: DataTreeSet.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-DataTreeSet.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-DataTreeSet.Tpo -c -o librjunglesparse_a-DataTreeSet.obj `if test -f 'DataTreeSet.cpp'; then $(CYGPATH_W) 'DataTreeSet.cpp'; else $(CYGPATH_W) '$(srcdir)/DataTreeSet.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-DataTreeSet.Tpo $(DEPDIR)/librjunglesparse_a-DataTreeSet.Po
#	source='DataTreeSet.cpp' object='librjunglesparse_a-DataTreeSet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-DataTreeSet.obj `if test -f 'DataTreeSet.cpp'; then $(CYGPATH_W) 'DataTreeSet.cpp'; else $(CYGPATH_W) '$(srcdir)/DataTreeSet.cpp'; fi`

librjunglesparse_a-Exception.o: Exception.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Exception.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Exception.Tpo -c -o librjunglesparse_a-Exception.o `test -f 'Exception.cpp' || echo '$(srcdir)/'`Exception.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Exception.Tpo $(DEPDIR)/librjunglesparse_a-Exception.Po
#	source='Exception.cpp' object='librjunglesparse_a-Exception.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Exception.o `test -f 'Exception.cpp' || echo '$(srcdir)/'`Exception.cpp

librjunglesparse_a-Exception.obj: Exception.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Exception.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Exception.Tpo -c -o librjunglesparse_a-Exception.obj `if test -f 'Exception.cpp'; then $(CYGPATH_W) 'Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/Exception.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Exception.Tpo $(DEPDIR)/librjunglesparse_a-Exception.Po
#	source='Exception.cpp' object='librjunglesparse_a-Exception.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Exception.obj `if test -f 'Exception.cpp'; then $(CYGPATH_W) 'Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/Exception.cpp'; fi`

librjunglesparse_a-FittingFct.o: FittingFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-FittingFct.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-FittingFct.Tpo -c -o librjunglesparse_a-FittingFct.o `test -f 'FittingFct.cpp' || echo '$(srcdir)/'`FittingFct.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-FittingFct.Tpo $(DEPDIR)/librjunglesparse_a-FittingFct.Po
#	source='FittingFct.cpp' object='librjunglesparse_a-FittingFct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-FittingFct.o `test -f 'FittingFct.cpp' || echo '$(srcdir)/'`FittingFct.cpp

librjunglesparse_a-FittingFct.obj: FittingFct.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-FittingFct.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-FittingFct.Tpo -c -o librjunglesparse_a-FittingFct.obj `if test -f 'FittingFct.cpp'; then $(CYGPATH_W) 'FittingFct.cpp'; else $(CYGPATH_W) '$(srcdir)/FittingFct.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-FittingFct.Tpo $(DEPDIR)/librjunglesparse_a-FittingFct.Po
#	source='FittingFct.cpp' object='librjunglesparse_a-FittingFct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-FittingFct.obj `if test -f 'FittingFct.cpp'; then $(CYGPATH_W) 'FittingFct.cpp'; else $(CYGPATH_W) '$(srcdir)/FittingFct.cpp'; fi`

librjunglesparse_a-RJunglePrediction.o: RJunglePrediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJunglePrediction.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJunglePrediction.Tpo -c -o librjunglesparse_a-RJunglePrediction.o `test -f 'RJunglePrediction.cpp' || echo '$(srcdir)/'`RJunglePrediction.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJunglePrediction.Tpo $(DEPDIR)/librjunglesparse_a-RJunglePrediction.Po
#	source='RJunglePrediction.cpp' object='librjunglesparse_a-RJunglePrediction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJunglePrediction.o `test -f 'RJunglePrediction.cpp' || echo '$(srcdir)/'`RJunglePrediction.cpp

librjunglesparse_a-RJunglePrediction.obj: RJunglePrediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJunglePrediction.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJunglePrediction.Tpo -c -o librjunglesparse_a-RJunglePrediction.obj `if test -f 'RJunglePrediction.cpp'; then $(CYGPATH_W) 'RJunglePrediction.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePrediction.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJunglePrediction.Tpo $(DEPDIR)/librjunglesparse_a-RJunglePrediction.Po
#	source='RJunglePrediction.cpp' object='librjunglesparse_a-RJunglePrediction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJunglePrediction.obj `if test -f 'RJunglePrediction.cpp'; then $(CYGPATH_W) 'RJunglePrediction.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePrediction.cpp'; fi`

librjunglesparse_a-SaveCollector.o: SaveCollector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-SaveCollector.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-SaveCollector.Tpo -c -o librjunglesparse_a-SaveCollector.o `test -f 'SaveCollector.cpp' || echo '$(srcdir)/'`SaveCollector.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-SaveCollector.Tpo $(DEPDIR)/librjunglesparse_a-SaveCollector.Po
#	source='SaveCollector.cpp' object='librjunglesparse_a-SaveCollector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-SaveCollector.o `test -f 'SaveCollector.cpp' || echo '$(srcdir)/'`SaveCollector.cpp

librjunglesparse_a-SaveCollector.obj: SaveCollector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-SaveCollector.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-SaveCollector.Tpo -c -o librjunglesparse_a-SaveCollector.obj `if test -f 'SaveCollector.cpp'; then $(CYGPATH_W) 'SaveCollector.cpp'; else $(CYGPATH_W) '$(srcdir)/SaveCollector.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-SaveCollector.Tpo $(DEPDIR)/librjunglesparse_a-SaveCollector.Po
#	source='SaveCollector.cpp' object='librjunglesparse_a-SaveCollector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-SaveCollector.obj `if test -f 'SaveCollector.cpp'; then $(CYGPATH_W) 'SaveCollector.cpp'; else $(CYGPATH_W) '$(srcdir)/SaveCollector.cpp'; fi`

librjunglesparse_a-PermImportance.o: PermImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-PermImportance.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-PermImportance.Tpo -c -o librjunglesparse_a-PermImportance.o `test -f 'PermImportance.cpp' || echo '$(srcdir)/'`PermImportance.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-PermImportance.Tpo $(DEPDIR)/librjunglesparse_a-PermImportance.Po
#	source='PermImportance.cpp' object='librjunglesparse_a-PermImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-PermImportance.o `test -f 'PermImportance.cpp' || echo '$(srcdir)/'`PermImportance.cpp

librjunglesparse_a-PermImportance.obj: PermImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-PermImportance.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-PermImportance.Tpo -c -o librjunglesparse_a-PermImportance.obj `if test -f 'PermImportance.cpp'; then $(CYGPATH_W) 'PermImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/PermImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-PermImportance.Tpo $(DEPDIR)/librjunglesparse_a-PermImportance.Po
#	source='PermImportance.cpp' object='librjunglesparse_a-PermImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-PermImportance.obj `if test -f 'PermImportance.cpp'; then $(CYGPATH_W) 'PermImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/PermImportance.cpp'; fi`

librjunglesparse_a-Prediction.o: Prediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Prediction.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Prediction.Tpo -c -o librjunglesparse_a-Prediction.o `test -f 'Prediction.cpp' || echo '$(srcdir)/'`Prediction.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Prediction.Tpo $(DEPDIR)/librjunglesparse_a-Prediction.Po
#	source='Prediction.cpp' object='librjunglesparse_a-Prediction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Prediction.o `test -f 'Prediction.cpp' || echo '$(srcdir)/'`Prediction.cpp

librjunglesparse_a-Prediction.obj: Prediction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Prediction.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Prediction.Tpo -c -o librjunglesparse_a-Prediction.obj `if test -f 'Prediction.cpp'; then $(CYGPATH_W) 'Prediction.cpp'; else $(CYGPATH_W) '$(srcdir)/Prediction.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Prediction.Tpo $(DEPDIR)/librjunglesparse_a-Prediction.Po
#	source='Prediction.cpp' object='librjunglesparse_a-Prediction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Prediction.obj `if test -f 'Prediction.cpp'; then $(CYGPATH_W) 'Prediction.cpp'; else $(CYGPATH_W) '$(srcdir)/Prediction.cpp'; fi`

librjunglesparse_a-ioLines.o: ioLines.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-ioLines.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-ioLines.Tpo -c -o librjunglesparse_a-ioLines.o `test -f 'ioLines.cpp' || echo '$(srcdir)/'`ioLines.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-ioLines.Tpo $(DEPDIR)/librjunglesparse_a-ioLines.Po
#	source='ioLines.cpp' object='librjunglesparse_a-ioLines.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-ioLines.o `test -f 'ioLines.cpp' || echo '$(srcdir)/'`ioLines.cpp

librjunglesparse_a-ioLines.obj: ioLines.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-ioLines.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-ioLines.Tpo -c -o librjunglesparse_a-ioLines.obj `if test -f 'ioLines.cpp'; then $(CYGPATH_W) 'ioLines.cpp'; else $(CYGPATH_W) '$(srcdir)/ioLines.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-ioLines.Tpo $(DEPDIR)/librjunglesparse_a-ioLines.Po
#	source='ioLines.cpp' object='librjunglesparse_a-ioLines.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-ioLines.obj `if test -f 'ioLines.cpp'; then $(CYGPATH_W) 'ioLines.cpp'; else $(CYGPATH_W) '$(srcdir)/ioLines.cpp'; fi`

librjunglesparse_a-Generator.o: Generator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Generator.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Generator.Tpo -c -o librjunglesparse_a-Generator.o `test -f 'Generator.cpp' || echo '$(srcdir)/'`Generator.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Generator.Tpo $(DEPDIR)/librjunglesparse_a-Generator.Po
#	source='Generator.cpp' object='librjunglesparse_a-Generator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Generator.o `test -f 'Generator.cpp' || echo '$(srcdir)/'`Generator.cpp

librjunglesparse_a-Generator.obj: Generator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Generator.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Generator.Tpo -c -o librjunglesparse_a-Generator.obj `if test -f 'Generator.cpp'; then $(CYGPATH_W) 'Generator.cpp'; else $(CYGPATH_W) '$(srcdir)/Generator.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Generator.Tpo $(DEPDIR)/librjunglesparse_a-Generator.Po
#	source='Generator.cpp' object='librjunglesparse_a-Generator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Generator.obj `if test -f 'Generator.cpp'; then $(CYGPATH_W) 'Generator.cpp'; else $(CYGPATH_W) '$(srcdir)/Generator.cpp'; fi`

librjunglesparse_a-gzstream.o: gzstream.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-gzstream.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-gzstream.Tpo -c -o librjunglesparse_a-gzstream.o `test -f 'gzstream.cpp' || echo '$(srcdir)/'`gzstream.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-gzstream.Tpo $(DEPDIR)/librjunglesparse_a-gzstream.Po
#	source='gzstream.cpp' object='librjunglesparse_a-gzstream.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-gzstream.o `test -f 'gzstream.cpp' || echo '$(srcdir)/'`gzstream.cpp

librjunglesparse_a-gzstream.obj: gzstream.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-gzstream.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-gzstream.Tpo -c -o librjunglesparse_a-gzstream.obj `if test -f 'gzstream.cpp'; then $(CYGPATH_W) 'gzstream.cpp'; else $(CYGPATH_W) '$(srcdir)/gzstream.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-gzstream.Tpo $(DEPDIR)/librjunglesparse_a-gzstream.Po
#	source='gzstream.cpp' object='librjunglesparse_a-gzstream.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-gzstream.obj `if test -f 'gzstream.cpp'; then $(CYGPATH_W) 'gzstream.cpp'; else $(CYGPATH_W) '$(srcdir)/gzstream.cpp'; fi`

librjunglesparse_a-Helper.o: Helper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Helper.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Helper.Tpo -c -o librjunglesparse_a-Helper.o `test -f 'Helper.cpp' || echo '$(srcdir)/'`Helper.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Helper.Tpo $(DEPDIR)/librjunglesparse_a-Helper.Po
#	source='Helper.cpp' object='librjunglesparse_a-Helper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Helper.o `test -f 'Helper.cpp' || echo '$(srcdir)/'`Helper.cpp

librjunglesparse_a-Helper.obj: Helper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Helper.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Helper.Tpo -c -o librjunglesparse_a-Helper.obj `if test -f 'Helper.cpp'; then $(CYGPATH_W) 'Helper.cpp'; else $(CYGPATH_W) '$(srcdir)/Helper.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Helper.Tpo $(DEPDIR)/librjunglesparse_a-Helper.Po
#	source='Helper.cpp' object='librjunglesparse_a-Helper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Helper.obj `if test -f 'Helper.cpp'; then $(CYGPATH_W) 'Helper.cpp'; else $(CYGPATH_W) '$(srcdir)/Helper.cpp'; fi`

librjunglesparse_a-INode.o: INode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-INode.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-INode.Tpo -c -o librjunglesparse_a-INode.o `test -f 'INode.cpp' || echo '$(srcdir)/'`INode.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-INode.Tpo $(DEPDIR)/librjunglesparse_a-INode.Po
#	source='INode.cpp' object='librjunglesparse_a-INode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-INode.o `test -f 'INode.cpp' || echo '$(srcdir)/'`INode.cpp

librjunglesparse_a-INode.obj: INode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-INode.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-INode.Tpo -c -o librjunglesparse_a-INode.obj `if test -f 'INode.cpp'; then $(CYGPATH_W) 'INode.cpp'; else $(CYGPATH_W) '$(srcdir)/INode.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-INode.Tpo $(DEPDIR)/librjunglesparse_a-INode.Po
#	source='INode.cpp' object='librjunglesparse_a-INode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-INode.obj `if test -f 'INode.cpp'; then $(CYGPATH_W) 'INode.cpp'; else $(CYGPATH_W) '$(srcdir)/INode.cpp'; fi`

librjunglesparse_a-librjungle.o: librjungle.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-librjungle.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-librjungle.Tpo -c -o librjunglesparse_a-librjungle.o `test -f 'librjungle.cpp' || echo '$(srcdir)/'`librjungle.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-librjungle.Tpo $(DEPDIR)/librjunglesparse_a-librjungle.Po
#	source='librjungle.cpp' object='librjunglesparse_a-librjungle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-librjungle.o `test -f 'librjungle.cpp' || echo '$(srcdir)/'`librjungle.cpp

librjunglesparse_a-librjungle.obj: librjungle.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-librjungle.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-librjungle.Tpo -c -o librjunglesparse_a-librjungle.obj `if test -f 'librjungle.cpp'; then $(CYGPATH_W) 'librjungle.cpp'; else $(CYGPATH_W) '$(srcdir)/librjungle.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-librjungle.Tpo $(DEPDIR)/librjunglesparse_a-librjungle.Po
#	source='librjungle.cpp' object='librjunglesparse_a-librjungle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-librjungle.obj `if test -f 'librjungle.cpp'; then $(CYGPATH_W) 'librjungle.cpp'; else $(CYGPATH_W) '$(srcdir)/librjungle.cpp'; fi`

librjunglesparse_a-Logistic.o: Logistic.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Logistic.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Logistic.Tpo -c -o librjunglesparse_a-Logistic.o `test -f 'Logistic.cpp' || echo '$(srcdir)/'`Logistic.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Logistic.Tpo $(DEPDIR)/librjunglesparse_a-Logistic.Po
#	source='Logistic.cpp' object='librjunglesparse_a-Logistic.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Logistic.o `test -f 'Logistic.cpp' || echo '$(srcdir)/'`Logistic.cpp

librjunglesparse_a-Logistic.obj: Logistic.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Logistic.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Logistic.Tpo -c -o librjunglesparse_a-Logistic.obj `if test -f 'Logistic.cpp'; then $(CYGPATH_W) 'Logistic.cpp'; else $(CYGPATH_W) '$(srcdir)/Logistic.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Logistic.Tpo $(DEPDIR)/librjunglesparse_a-Logistic.Po
#	source='Logistic.cpp' object='librjunglesparse_a-Logistic.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Logistic.obj `if test -f 'Logistic.cpp'; then $(CYGPATH_W) 'Logistic.cpp'; else $(CYGPATH_W) '$(srcdir)/Logistic.cpp'; fi`

librjunglesparse_a-Node.o: Node.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Node.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Node.Tpo -c -o librjunglesparse_a-Node.o `test -f 'Node.cpp' || echo '$(srcdir)/'`Node.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Node.Tpo $(DEPDIR)/librjunglesparse_a-Node.Po
#	source='Node.cpp' object='librjunglesparse_a-Node.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Node.o `test -f 'Node.cpp' || echo '$(srcdir)/'`Node.cpp

librjunglesparse_a-Node.obj: Node.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Node.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Node.Tpo -c -o librjunglesparse_a-Node.obj `if test -f 'Node.cpp'; then $(CYGPATH_W) 'Node.cpp'; else $(CYGPATH_W) '$(srcdir)/Node.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Node.Tpo $(DEPDIR)/librjunglesparse_a-Node.Po
#	source='Node.cpp' object='librjunglesparse_a-Node.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Node.obj `if test -f 'Node.cpp'; then $(CYGPATH_W) 'Node.cpp'; else $(CYGPATH_W) '$(srcdir)/Node.cpp'; fi`

librjunglesparse_a-Profiler.o: Profiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Profiler.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Profiler.Tpo -c -o librjunglesparse_a-Profiler.o `test -f 'Profiler.cpp' || echo '$(srcdir)/'`Profiler.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Profiler.Tpo $(DEPDIR)/librjunglesparse_a-Profiler.Po
#	source='Profiler.cpp' object='librjunglesparse_a-Profiler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Profiler.o `test -f 'Profiler.cpp' || echo '$(srcdir)/'`Profiler.cpp

librjunglesparse_a-Profiler.obj: Profiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Profiler.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Profiler.Tpo -c -o librjunglesparse_a-Profiler.obj `if test -f 'Profiler.cpp'; then $(CYGPATH_W) 'Profiler.cpp'; else $(CYGPATH_W) '$(srcdir)/Profiler.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Profiler.Tpo $(DEPDIR)/librjunglesparse_a-Profiler.Po
#	source='Profiler.cpp' object='librjunglesparse_a-Profiler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Profiler.obj `if test -f 'Profiler.cpp'; then $(CYGPATH_W) 'Profiler.cpp'; else $(CYGPATH_W) '$(srcdir)/Profiler.cpp'; fi`

librjunglesparse_a-Proximities.o: Proximities.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Proximities.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Proximities.Tpo -c -o librjunglesparse_a-Proximities.o `test -f 'Proximities.cpp' || echo '$(srcdir)/'`Proximities.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Proximities.Tpo $(DEPDIR)/librjunglesparse_a-Proximities.Po
#	source='Proximities.cpp' object='librjunglesparse_a-Proximities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Proximities.o `test -f 'Proximities.cpp' || echo '$(srcdir)/'`Proximities.cpp

librjunglesparse_a-Proximities.obj: Proximities.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Proximities.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Proximities.Tpo -c -o librjunglesparse_a-Proximities.obj `if test -f 'Proximities.cpp'; then $(CYGPATH_W) 'Proximities.cpp'; else $(CYGPATH_W) '$(srcdir)/Proximities.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Proximities.Tpo $(DEPDIR)/librjunglesparse_a-Proximities.Po
#	source='Proximities.cpp' object='librjunglesparse_a-Proximities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Proximities.obj `if test -f 'Proximities.cpp'; then $(CYGPATH_W) 'Proximities.cpp'; else $(CYGPATH_W) '$(srcdir)/Proximities.cpp'; fi`

librjunglesparse_a-RJungleAcc.o: RJungleAcc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleAcc.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleAcc.Tpo -c -o librjunglesparse_a-RJungleAcc.o `test -f 'RJungleAcc.cpp' || echo '$(srcdir)/'`RJungleAcc.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleAcc.Tpo $(DEPDIR)/librjunglesparse_a-RJungleAcc.Po
#	source='RJungleAcc.cpp' object='librjunglesparse_a-RJungleAcc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleAcc.o `test -f 'RJungleAcc.cpp' || echo '$(srcdir)/'`RJungleAcc.cpp

librjunglesparse_a-RJungleAcc.obj: RJungleAcc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleAcc.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleAcc.Tpo -c -o librjunglesparse_a-RJungleAcc.obj `if test -f 'RJungleAcc.cpp'; then $(CYGPATH_W) 'RJungleAcc.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleAcc.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleAcc.Tpo $(DEPDIR)/librjunglesparse_a-RJungleAcc.Po
#	source='RJungleAcc.cpp' object='librjunglesparse_a-RJungleAcc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleAcc.obj `if test -f 'RJungleAcc.cpp'; then $(CYGPATH_W) 'RJungleAcc.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleAcc.cpp'; fi`

librjunglesparse_a-RJungleBinder.o: RJungleBinder.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleBinder.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleBinder.Tpo -c -o librjunglesparse_a-RJungleBinder.o `test -f 'RJungleBinder.cpp' || echo '$(srcdir)/'`RJungleBinder.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleBinder.Tpo $(DEPDIR)/librjunglesparse_a-RJungleBinder.Po
#	source='RJungleBinder.cpp' object='librjunglesparse_a-RJungleBinder.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleBinder.o `test -f 'RJungleBinder.cpp' || echo '$(srcdir)/'`RJungleBinder.cpp

librjunglesparse_a-RJungleBinder.obj: RJungleBinder.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleBinder.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleBinder.Tpo -c -o librjunglesparse_a-RJungleBinder.obj `if test -f 'RJungleBinder.cpp'; then $(CYGPATH_W) 'RJungleBinder.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleBinder.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleBinder.Tpo $(DEPDIR)/librjunglesparse_a-RJungleBinder.Po
#	source='RJungleBinder.cpp' object='librjunglesparse_a-RJungleBinder.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleBinder.obj `if test -f 'RJungleBinder.cpp'; then $(CYGPATH_W) 'RJungleBinder.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleBinder.cpp'; fi`

librjunglesparse_a-RJungleCompiler.o: RJungleCompiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleCompiler.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleCompiler.Tpo -c -o librjunglesparse_a-RJungleCompiler.o `test -f 'RJungleCompiler.cpp' || echo '$(srcdir)/'`RJungleCompiler.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleCompiler.Tpo $(DEPDIR)/librjunglesparse_a-RJungleCompiler.Po
#	source='RJungleCompiler.cpp' object='librjunglesparse_a-RJungleCompiler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleCompiler.o `test -f 'RJungleCompiler.cpp' || echo '$(srcdir)/'`RJungleCompiler.cpp

librjunglesparse_a-RJungleCompiler.obj: RJungleCompiler.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleCompiler.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleCompiler.Tpo -c -o librjunglesparse_a-RJungleCompiler.obj `if test -f 'RJungleCompiler.cpp'; then $(CYGPATH_W) 'RJungleCompiler.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCompiler.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleCompiler.Tpo $(DEPDIR)/librjunglesparse_a-RJungleCompiler.Po
#	source='RJungleCompiler.cpp' object='librjunglesparse_a-RJungleCompiler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleCompiler.obj `if test -f 'RJungleCompiler.cpp'; then $(CYGPATH_W) 'RJungleCompiler.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCompiler.cpp'; fi`

librjunglesparse_a-RJungleConfusion.o: RJungleConfusion.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleConfusion.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleConfusion.Tpo -c -o librjunglesparse_a-RJungleConfusion.o `test -f 'RJungleConfusion.cpp' || echo '$(srcdir)/'`RJungleConfusion.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleConfusion.Tpo $(DEPDIR)/librjunglesparse_a-RJungleConfusion.Po
#	source='RJungleConfusion.cpp' object='librjunglesparse_a-RJungleConfusion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleConfusion.o `test -f 'RJungleConfusion.cpp' || echo '$(srcdir)/'`RJungleConfusion.cpp

librjunglesparse_a-RJungleConfusion.obj: RJungleConfusion.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleConfusion.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleConfusion.Tpo -c -o librjunglesparse_a-RJungleConfusion.obj `if test -f 'RJungleConfusion.cpp'; then $(CYGPATH_W) 'RJungleConfusion.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleConfusion.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleConfusion.Tpo $(DEPDIR)/librjunglesparse_a-RJungleConfusion.Po
#	source='RJungleConfusion.cpp' object='librjunglesparse_a-RJungleConfusion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleConfusion.obj `if test -f 'RJungleConfusion.cpp'; then $(CYGPATH_W) 'RJungleConfusion.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleConfusion.cpp'; fi`

librjunglesparse_a-RJungleCtrl.o: RJungleCtrl.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleCtrl.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleCtrl.Tpo -c -o librjunglesparse_a-RJungleCtrl.o `test -f 'RJungleCtrl.cpp' || echo '$(srcdir)/'`RJungleCtrl.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleCtrl.Tpo $(DEPDIR)/librjunglesparse_a-RJungleCtrl.Po
#	source='RJungleCtrl.cpp' object='librjunglesparse_a-RJungleCtrl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleCtrl.o `test -f 'RJungleCtrl.cpp' || echo '$(srcdir)/'`RJungleCtrl.cpp

librjunglesparse_a-RJungleCtrl.obj: RJungleCtrl.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleCtrl.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleCtrl.Tpo -c -o librjunglesparse_a-RJungleCtrl.obj `if test -f 'RJungleCtrl.cpp'; then $(CYGPATH_W) 'RJungleCtrl.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCtrl.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleCtrl.Tpo $(DEPDIR)/librjunglesparse_a-RJungleCtrl.Po
#	source='RJungleCtrl.cpp' object='librjunglesparse_a-RJungleCtrl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleCtrl.obj `if test -f 'RJungleCtrl.cpp'; then $(CYGPATH_W) 'RJungleCtrl.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleCtrl.cpp'; fi`

librjunglesparse_a-RJungleFromXML.o: RJungleFromXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleFromXML.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleFromXML.Tpo -c -o librjunglesparse_a-RJungleFromXML.o `test -f 'RJungleFromXML.cpp' || echo '$(srcdir)/'`RJungleFromXML.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleFromXML.Tpo $(DEPDIR)/librjunglesparse_a-RJungleFromXML.Po
#	source='RJungleFromXML.cpp' object='librjunglesparse_a-RJungleFromXML.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleFromXML.o `test -f 'RJungleFromXML.cpp' || echo '$(srcdir)/'`RJungleFromXML.cpp

librjunglesparse_a-RJungleFromXML.obj: RJungleFromXML.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleFromXML.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleFromXML.Tpo -c -o librjunglesparse_a-RJungleFromXML.obj `if test -f 'RJungleFromXML.cpp'; then $(CYGPATH_W) 'RJungleFromXML.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleFromXML.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleFromXML.Tpo $(DEPDIR)/librjunglesparse_a-RJungleFromXML.Po
#	source='RJungleFromXML.cpp' object='librjunglesparse_a-RJungleFromXML.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleFromXML.obj `if test -f 'RJungleFromXML.cpp'; then $(CYGPATH_W) 'RJungleFromXML.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleFromXML.cpp'; fi`

librjunglesparse_a-RJungleGen.o: RJungleGen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleGen.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleGen.Tpo -c -o librjunglesparse_a-RJungleGen.o `test -f 'RJungleGen.cpp' || echo '$(srcdir)/'`RJungleGen.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleGen.Tpo $(DEPDIR)/librjunglesparse_a-RJungleGen.Po
#	source='RJungleGen.cpp' object='librjunglesparse_a-RJungleGen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleGen.o `test -f 'RJungleGen.cpp' || echo '$(srcdir)/'`RJungleGen.cpp

librjunglesparse_a-RJungleGen.obj: RJungleGen.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleGen.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleGen.Tpo -c -o librjunglesparse_a-RJungleGen.obj `if test -f 'RJungleGen.cpp'; then $(CYGPATH_W) 'RJungleGen.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGen.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleGen.Tpo $(DEPDIR)/librjunglesparse_a-RJungleGen.Po
#	source='RJungleGen.cpp' object='librjunglesparse_a-RJungleGen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleGen.obj `if test -f 'RJungleGen.cpp'; then $(CYGPATH_W) 'RJungleGen.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGen.cpp'; fi`

librjunglesparse_a-RJungleGrow.o: RJungleGrow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleGrow.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleGrow.Tpo -c -o librjunglesparse_a-RJungleGrow.o `test -f 'RJungleGrow.cpp' || echo '$(srcdir)/'`RJungleGrow.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleGrow.Tpo $(DEPDIR)/librjunglesparse_a-RJungleGrow.Po
#	source='RJungleGrow.cpp' object='librjunglesparse_a-RJungleGrow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleGrow.o `test -f 'RJungleGrow.cpp' || echo '$(srcdir)/'`RJungleGrow.cpp

librjunglesparse_a-RJungleGrow.obj: RJungleGrow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleGrow.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleGrow.Tpo -c -o librjunglesparse_a-RJungleGrow.obj `if test -f 'RJungleGrow.cpp'; then $(CYGPATH_W) 'RJungleGrow.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGrow.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleGrow.Tpo $(DEPDIR)/librjunglesparse_a-RJungleGrow.Po
#	source='RJungleGrow.cpp' object='librjunglesparse_a-RJungleGrow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleGrow.obj `if test -f 'RJungleGrow.cpp'; then $(CYGPATH_W) 'RJungleGrow.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleGrow.cpp'; fi`

librjunglesparse_a-RJungleHelper.o: RJungleHelper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleHelper.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleHelper.Tpo -c -o librjunglesparse_a-RJungleHelper.o `test -f 'RJungleHelper.cpp' || echo '$(srcdir)/'`RJungleHelper.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleHelper.Tpo $(DEPDIR)/librjunglesparse_a-RJungleHelper.Po
#	source='RJungleHelper.cpp' object='librjunglesparse_a-RJungleHelper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleHelper.o `test -f 'RJungleHelper.cpp' || echo '$(srcdir)/'`RJungleHelper.cpp

librjunglesparse_a-RJungleHelper.obj: RJungleHelper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleHelper.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleHelper.Tpo -c -o librjunglesparse_a-RJungleHelper.obj `if test -f 'RJungleHelper.cpp'; then $(CYGPATH_W) 'RJungleHelper.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleHelper.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleHelper.Tpo $(DEPDIR)/librjunglesparse_a-RJungleHelper.Po
#	source='RJungleHelper.cpp' object='librjunglesparse_a-RJungleHelper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleHelper.obj `if test -f 'RJungleHelper.cpp'; then $(CYGPATH_W) 'RJungleHelper.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleHelper.cpp'; fi`

librjunglesparse_a-RJungleImportance.o: RJungleImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleImportance.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleImportance.Tpo -c -o librjunglesparse_a-RJungleImportance.o `test -f 'RJungleImportance.cpp' || echo '$(srcdir)/'`RJungleImportance.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleImportance.Tpo $(DEPDIR)/librjunglesparse_a-RJungleImportance.Po
#	source='RJungleImportance.cpp' object='librjunglesparse_a-RJungleImportance.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleImportance.o `test -f 'RJungleImportance.cpp' || echo '$(srcdir)/'`RJungleImportance.cpp

librjunglesparse_a-RJungleImportance.obj: RJungleImportance.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleImportance.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleImportance.Tpo -c -o librjunglesparse_a-RJungleImportance.obj `if test -f 'RJungleImportance.cpp'; then $(CYGPATH_W) 'RJungleImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImportance.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleImportance.Tpo $(DEPDIR)/librjunglesparse_a-RJungleImportance.Po
#	source='RJungleImportance.cpp' object='librjunglesparse_a-RJungleImportance.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleImportance.obj `if test -f 'RJungleImportance.cpp'; then $(CYGPATH_W) 'RJungleImportance.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImportance.cpp'; fi`

librjunglesparse_a-RJungleImpute.o: RJungleImpute.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleImpute.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleImpute.Tpo -c -o librjunglesparse_a-RJungleImpute.o `test -f 'RJungleImpute.cpp' || echo '$(srcdir)/'`RJungleImpute.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleImpute.Tpo $(DEPDIR)/librjunglesparse_a-RJungleImpute.Po
#	source='RJungleImpute.cpp' object='librjunglesparse_a-RJungleImpute.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleImpute.o `test -f 'RJungleImpute.cpp' || echo '$(srcdir)/'`RJungleImpute.cpp

librjunglesparse_a-RJungleImpute.obj: RJungleImpute.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleImpute.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleImpute.Tpo -c -o librjunglesparse_a-RJungleImpute.obj `if test -f 'RJungleImpute.cpp'; then $(CYGPATH_W) 'RJungleImpute.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImpute.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleImpute.Tpo $(DEPDIR)/librjunglesparse_a-RJungleImpute.Po
#	source='RJungleImpute.cpp' object='librjunglesparse_a-RJungleImpute.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleImpute.obj `if test -f 'RJungleImpute.cpp'; then $(CYGPATH_W) 'RJungleImpute.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleImpute.cpp'; fi`

librjunglesparse_a-RJungleIO.o: RJungleIO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleIO.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleIO.Tpo -c -o librjunglesparse_a-RJungleIO.o `test -f 'RJungleIO.cpp' || echo '$(srcdir)/'`RJungleIO.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleIO.Tpo $(DEPDIR)/librjunglesparse_a-RJungleIO.Po
#	source='RJungleIO.cpp' object='librjunglesparse_a-RJungleIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleIO.o `test -f 'RJungleIO.cpp' || echo '$(srcdir)/'`RJungleIO.cpp

librjunglesparse_a-RJungleIO.obj: RJungleIO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleIO.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleIO.Tpo -c -o librjunglesparse_a-RJungleIO.obj `if test -f 'RJungleIO.cpp'; then $(CYGPATH_W) 'RJungleIO.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleIO.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleIO.Tpo $(DEPDIR)/librjunglesparse_a-RJungleIO.Po
#	source='RJungleIO.cpp' object='librjunglesparse_a-RJungleIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleIO.obj `if test -f 'RJungleIO.cpp'; then $(CYGPATH_W) 'RJungleIO.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleIO.cpp'; fi`

librjunglesparse_a-RJunglePar.o: RJunglePar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJunglePar.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJunglePar.Tpo -c -o librjunglesparse_a-RJunglePar.o `test -f 'RJunglePar.cpp' || echo '$(srcdir)/'`RJunglePar.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJunglePar.Tpo $(DEPDIR)/librjunglesparse_a-RJunglePar.Po
#	source='RJunglePar.cpp' object='librjunglesparse_a-RJunglePar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJunglePar.o `test -f 'RJunglePar.cpp' || echo '$(srcdir)/'`RJunglePar.cpp

librjunglesparse_a-RJunglePar.obj: RJunglePar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJunglePar.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJunglePar.Tpo -c -o librjunglesparse_a-RJunglePar.obj `if test -f 'RJunglePar.cpp'; then $(CYGPATH_W) 'RJunglePar.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePar.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJunglePar.Tpo $(DEPDIR)/librjunglesparse_a-RJunglePar.Po
#	source='RJunglePar.cpp' object='librjunglesparse_a-RJunglePar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJunglePar.obj `if test -f 'RJunglePar.cpp'; then $(CYGPATH_W) 'RJunglePar.cpp'; else $(CYGPATH_W) '$(srcdir)/RJunglePar.cpp'; fi`

librjunglesparse_a-RJungleProxi.o: RJungleProxi.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleProxi.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleProxi.Tpo -c -o librjunglesparse_a-RJungleProxi.o `test -f 'RJungleProxi.cpp' || echo '$(srcdir)/'`RJungleProxi.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleProxi.Tpo $(DEPDIR)/librjunglesparse_a-RJungleProxi.Po
#	source='RJungleProxi.cpp' object='librjunglesparse_a-RJungleProxi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleProxi.o `test -f 'RJungleProxi.cpp' || echo '$(srcdir)/'`RJungleProxi.cpp

librjunglesparse_a-RJungleProxi.obj: RJungleProxi.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-RJungleProxi.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-RJungleProxi.Tpo -c -o librjunglesparse_a-RJungleProxi.obj `if test -f 'RJungleProxi.cpp'; then $(CYGPATH_W) 'RJungleProxi.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProxi.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-RJungleProxi.Tpo $(DEPDIR)/librjunglesparse_a-RJungleProxi.Po
#	source='RJungleProxi.cpp' object='librjunglesparse_a-RJungleProxi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-RJungleProxi.obj `if test -f 'RJungleProxi.cpp'; then $(CYGPATH_W) 'RJungleProxi.cpp'; else $(CYGPATH_W) '$(srcdir)/RJungleProxi.cpp'; fi`

librjunglesparse_a-SClassAtom.o: SClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-SClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-SClassAtom.Tpo -c -o librjunglesparse_a-SClassAtom.o `test -f 'SClassAtom.cpp' || echo '$(srcdir)/'`SClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-SClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-SClassAtom.Po
#	source='SClassAtom.cpp' object='librjunglesparse_a-SClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-SClassAtom.o `test -f 'SClassAtom.cpp' || echo '$(srcdir)/'`SClassAtom.cpp

librjunglesparse_a-SClassAtom.obj: SClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-SClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-SClassAtom.Tpo -c -o librjunglesparse_a-SClassAtom.obj `if test -f 'SClassAtom.cpp'; then $(CYGPATH_W) 'SClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/SClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-SClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-SClassAtom.Po
#	source='SClassAtom.cpp' object='librjunglesparse_a-SClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-SClassAtom.obj `if test -f 'SClassAtom.cpp'; then $(CYGPATH_W) 'SClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/SClassAtom.cpp'; fi`

librjunglesparse_a-T2ClassAtom.o: T2ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-T2ClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-T2ClassAtom.Tpo -c -o librjunglesparse_a-T2ClassAtom.o `test -f 'T2ClassAtom.cpp' || echo '$(srcdir)/'`T2ClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-T2ClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-T2ClassAtom.Po
#	source='T2ClassAtom.cpp' object='librjunglesparse_a-T2ClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-T2ClassAtom.o `test -f 'T2ClassAtom.cpp' || echo '$(srcdir)/'`T2ClassAtom.cpp

librjunglesparse_a-T2ClassAtom.obj: T2ClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-T2ClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-T2ClassAtom.Tpo -c -o librjunglesparse_a-T2ClassAtom.obj `if test -f 'T2ClassAtom.cpp'; then $(CYGPATH_W) 'T2ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/T2ClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-T2ClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-T2ClassAtom.Po
#	source='T2ClassAtom.cpp' object='librjunglesparse_a-T2ClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-T2ClassAtom.obj `if test -f 'T2ClassAtom.cpp'; then $(CYGPATH_W) 'T2ClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/T2ClassAtom.cpp'; fi`

librjunglesparse_a-TermClassAtom.o: TermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TermClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TermClassAtom.Tpo -c -o librjunglesparse_a-TermClassAtom.o `test -f 'TermClassAtom.cpp' || echo '$(srcdir)/'`TermClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TermClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-TermClassAtom.Po
#	source='TermClassAtom.cpp' object='librjunglesparse_a-TermClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TermClassAtom.o `test -f 'TermClassAtom.cpp' || echo '$(srcdir)/'`TermClassAtom.cpp

librjunglesparse_a-TermClassAtom.obj: TermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TermClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TermClassAtom.Tpo -c -o librjunglesparse_a-TermClassAtom.obj `if test -f 'TermClassAtom.cpp'; then $(CYGPATH_W) 'TermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TermClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TermClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-TermClassAtom.Po
#	source='TermClassAtom.cpp' object='librjunglesparse_a-TermClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TermClassAtom.obj `if test -f 'TermClassAtom.cpp'; then $(CYGPATH_W) 'TermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TermClassAtom.cpp'; fi`

librjunglesparse_a-TermResult.o: TermResult.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TermResult.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TermResult.Tpo -c -o librjunglesparse_a-TermResult.o `test -f 'TermResult.cpp' || echo '$(srcdir)/'`TermResult.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TermResult.Tpo $(DEPDIR)/librjunglesparse_a-TermResult.Po
#	source='TermResult.cpp' object='librjunglesparse_a-TermResult.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TermResult.o `test -f 'TermResult.cpp' || echo '$(srcdir)/'`TermResult.cpp

librjunglesparse_a-TermResult.obj: TermResult.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TermResult.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TermResult.Tpo -c -o librjunglesparse_a-TermResult.obj `if test -f 'TermResult.cpp'; then $(CYGPATH_W) 'TermResult.cpp'; else $(CYGPATH_W) '$(srcdir)/TermResult.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TermResult.Tpo $(DEPDIR)/librjunglesparse_a-TermResult.Po
#	source='TermResult.cpp' object='librjunglesparse_a-TermResult.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TermResult.obj `if test -f 'TermResult.cpp'; then $(CYGPATH_W) 'TermResult.cpp'; else $(CYGPATH_W) '$(srcdir)/TermResult.cpp'; fi`

librjunglesparse_a-TestClass.o: TestClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TestClass.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TestClass.Tpo -c -o librjunglesparse_a-TestClass.o `test -f 'TestClass.cpp' || echo '$(srcdir)/'`TestClass.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TestClass.Tpo $(DEPDIR)/librjunglesparse_a-TestClass.Po
#	source='TestClass.cpp' object='librjunglesparse_a-TestClass.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TestClass.o `test -f 'TestClass.cpp' || echo '$(srcdir)/'`TestClass.cpp

librjunglesparse_a-TestClass.obj: TestClass.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TestClass.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TestClass.Tpo -c -o librjunglesparse_a-TestClass.obj `if test -f 'TestClass.cpp'; then $(CYGPATH_W) 'TestClass.cpp'; else $(CYGPATH_W) '$(srcdir)/TestClass.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TestClass.Tpo $(DEPDIR)/librjunglesparse_a-TestClass.Po
#	source='TestClass.cpp' object='librjunglesparse_a-TestClass.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TestClass.obj `if test -f 'TestClass.cpp'; then $(CYGPATH_W) 'TestClass.cpp'; else $(CYGPATH_W) '$(srcdir)/TestClass.cpp'; fi`

librjunglesparse_a-LotusTermClassAtom.o: LotusTermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-LotusTermClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Tpo -c -o librjunglesparse_a-LotusTermClassAtom.o `test -f 'LotusTermClassAtom.cpp' || echo '$(srcdir)/'`LotusTermClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Po
#	source='LotusTermClassAtom.cpp' object='librjunglesparse_a-LotusTermClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-LotusTermClassAtom.o `test -f 'LotusTermClassAtom.cpp' || echo '$(srcdir)/'`LotusTermClassAtom.cpp

librjunglesparse_a-LotusTermClassAtom.obj: LotusTermClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-LotusTermClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Tpo -c -o librjunglesparse_a-LotusTermClassAtom.obj `if test -f 'LotusTermClassAtom.cpp'; then $(CYGPATH_W) 'LotusTermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/LotusTermClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-LotusTermClassAtom.Po
#	source='LotusTermClassAtom.cpp' object='librjunglesparse_a-LotusTermClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-LotusTermClassAtom.obj `if test -f 'LotusTermClassAtom.cpp'; then $(CYGPATH_W) 'LotusTermClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/LotusTermClassAtom.cpp'; fi`

librjunglesparse_a-TimeProf.o: TimeProf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TimeProf.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TimeProf.Tpo -c -o librjunglesparse_a-TimeProf.o `test -f 'TimeProf.cpp' || echo '$(srcdir)/'`TimeProf.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TimeProf.Tpo $(DEPDIR)/librjunglesparse_a-TimeProf.Po
#	source='TimeProf.cpp' object='librjunglesparse_a-TimeProf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TimeProf.o `test -f 'TimeProf.cpp' || echo '$(srcdir)/'`TimeProf.cpp

librjunglesparse_a-TimeProf.obj: TimeProf.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TimeProf.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TimeProf.Tpo -c -o librjunglesparse_a-TimeProf.obj `if test -f 'TimeProf.cpp'; then $(CYGPATH_W) 'TimeProf.cpp'; else $(CYGPATH_W) '$(srcdir)/TimeProf.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TimeProf.Tpo $(DEPDIR)/librjunglesparse_a-TimeProf.Po
#	source='TimeProf.cpp' object='librjunglesparse_a-TimeProf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TimeProf.obj `if test -f 'TimeProf.cpp'; then $(CYGPATH_W) 'TimeProf.cpp'; else $(CYGPATH_W) '$(srcdir)/TimeProf.cpp'; fi`

librjunglesparse_a-TMClassAtom.o: TMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TMClassAtom.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TMClassAtom.Tpo -c -o librjunglesparse_a-TMClassAtom.o `test -f 'TMClassAtom.cpp' || echo '$(srcdir)/'`TMClassAtom.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TMClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-TMClassAtom.Po
#	source='TMClassAtom.cpp' object='librjunglesparse_a-TMClassAtom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TMClassAtom.o `test -f 'TMClassAtom.cpp' || echo '$(srcdir)/'`TMClassAtom.cpp

librjunglesparse_a-TMClassAtom.obj: TMClassAtom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-TMClassAtom.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-TMClassAtom.Tpo -c -o librjunglesparse_a-TMClassAtom.obj `if test -f 'TMClassAtom.cpp'; then $(CYGPATH_W) 'TMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TMClassAtom.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-TMClassAtom.Tpo $(DEPDIR)/librjunglesparse_a-TMClassAtom.Po
#	source='TMClassAtom.cpp' object='librjunglesparse_a-TMClassAtom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-TMClassAtom.obj `if test -f 'TMClassAtom.cpp'; then $(CYGPATH_W) 'TMClassAtom.cpp'; else $(CYGPATH_W) '$(srcdir)/TMClassAtom.cpp'; fi`

librjunglesparse_a-Tree.o: Tree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Tree.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Tree.Tpo -c -o librjunglesparse_a-Tree.o `test -f 'Tree.cpp' || echo '$(srcdir)/'`Tree.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Tree.Tpo $(DEPDIR)/librjunglesparse_a-Tree.Po
#	source='Tree.cpp' object='librjunglesparse_a-Tree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Tree.o `test -f 'Tree.cpp' || echo '$(srcdir)/'`Tree.cpp

librjunglesparse_a-Tree.obj: Tree.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-Tree.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-Tree.Tpo -c -o librjunglesparse_a-Tree.obj `if test -f 'Tree.cpp'; then $(CYGPATH_W) 'Tree.cpp'; else $(CYGPATH_W) '$(srcdir)/Tree.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-Tree.Tpo $(DEPDIR)/librjunglesparse_a-Tree.Po
#	source='Tree.cpp' object='librjunglesparse_a-Tree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-Tree.obj `if test -f 'Tree.cpp'; then $(CYGPATH_W) 'Tree.cpp'; else $(CYGPATH_W) '$(srcdir)/Tree.cpp'; fi`

librjunglesparse_a-mvt.o: mvt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-mvt.o -MD -MP -MF $(DEPDIR)/librjunglesparse_a-mvt.Tpo -c -o librjunglesparse_a-mvt.o `test -f 'mvt.cpp' || echo '$(srcdir)/'`mvt.cpp
	$(am__mv) $(DEPDIR)/librjunglesparse_a-mvt.Tpo $(DEPDIR)/librjunglesparse_a-mvt.Po
#	source='mvt.cpp' object='librjunglesparse_a-mvt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-mvt.o `test -f 'mvt.cpp' || echo '$(srcdir)/'`mvt.cpp

librjunglesparse_a-mvt.obj: mvt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT librjunglesparse_a-mvt.obj -MD -MP -MF $(DEPDIR)/librjunglesparse_a-mvt.Tpo -c -o librjunglesparse_a-mvt.obj `if test -f 'mvt.cpp'; then $(CYGPATH_W) 'mvt.cpp'; else $(CYGPATH_W) '$(srcdir)/mvt.cpp'; fi`
	$(am__mv) $(DEPDIR)/librjunglesparse_a-mvt.Tpo $(DEPDIR)/librjunglesparse_a-mvt.Po
#	source='mvt.cpp' object='librjunglesparse_a-mvt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(librjunglesparse_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o librjunglesparse_a-mvt.obj `if test -f 'mvt.cpp'; then $(CYGPATH_W) 'mvt.cpp'; else $(CYGPATH_W) '$(srcdir)/mvt.cpp'; fi`

.f.o:
	$(F77COMPILE) -c -o $@ $<

.f.obj:
	$(F77COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.f.lo:
	$(LTF77COMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-librjungle_aHEADERS: $(librjungle_a_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(librjungle_adir)" || $(MKDIR_P) "$(DESTDIR)$(librjungle_adir)"
	@list='$(librjungle_a_HEADERS)'; test -n "$(librjungle_adir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(librjungle_adir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(librjungle_adir)" || exit $$?; \
	done

uninstall-librjungle_aHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(librjungle_a_HEADERS)'; test -n "$(librjungle_adir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(librjungle_adir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(librjungle_adir)" && rm -f $$files
install-librjunglesparse_aHEADERS: $(librjunglesparse_a_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(librjunglesparse_adir)" || $(MKDIR_P) "$(DESTDIR)$(librjunglesparse_adir)"
	@list='$(librjunglesparse_a_HEADERS)'; test -n "$(librjunglesparse_adir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(librjunglesparse_adir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(librjunglesparse_adir)" || exit $$?; \
	done

uninstall-librjunglesparse_aHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(librjunglesparse_a_HEADERS)'; test -n "$(librjunglesparse_adir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(librjunglesparse_adir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(librjunglesparse_adir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(librjungle_adir)" "$(DESTDIR)$(librjunglesparse_adir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-librjungle_aHEADERS \
	install-librjunglesparse_aHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLIBRARIES uninstall-librjungle_aHEADERS \
	uninstall-librjunglesparse_aHEADERS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-libLIBRARIES install-librjungle_aHEADERS \
	install-librjunglesparse_aHEADERS install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-libLIBRARIES \
	uninstall-librjungle_aHEADERS \
	uninstall-librjunglesparse_aHEADERS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
